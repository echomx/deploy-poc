/*
Navicat MySQL Data Transfer

Source Server         : 10.70.39.214
Source Server Version : 50560
Source Host           : 10.70.39.214:3306
Source Database       : hcpaas

Target Server Type    : MYSQL
Target Server Version : 50560
File Encoding         : 65001

Date: 2018-08-25 11:07:04
*/

SET FOREIGN_KEY_CHECKS=0
;
DROP DATABASE IF EXISTS `hcpaas`;
CREATE DATABASE `hcpaas`;
USE `hcpaas`;

-- ----------------------------
-- Table structure for unshelved_node
-- ----------------------------
DROP TABLE IF EXISTS `unshelved_node`;
CREATE TABLE `unshelved_node` (
  `unshelved_id` int(11) NOT NULL AUTO_INCREMENT,
  `hostname` varchar(200) DEFAULT NULL,
  `status` varchar(200) DEFAULT NULL,
  `cluster` int(8) DEFAULT NULL,
  `node_ip` varchar(200) DEFAULT NULL,
  `unshelved_time` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`unshelved_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- ----------------------------
-- Table structure for net_manager
-- ----------------------------
DROP TABLE IF EXISTS `net_manager`;
CREATE TABLE `net_manager` (
  `net_manager_id` int(11) NOT NULL AUTO_INCREMENT,
  `net_id` int(11) DEFAULT NULL,
  `namespaces` mediumtext,
  `location` int(11) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`net_manager_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;


-- ----------------------------
-- Table structure for app_config_map
-- ----------------------------
DROP TABLE IF EXISTS `app_config_map`;
CREATE TABLE `app_config_map` (
  `app_config_map_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '服务配置ID',
  `app_id` int(11) DEFAULT NULL COMMENT '服务ID',
  `app_name` varchar(50) DEFAULT NULL COMMENT '服务名称',
  `config_group_id` int(11) DEFAULT NULL COMMENT '配置组ID',
  `config_file_id` int(11) DEFAULT NULL COMMENT '配置文件ID',
  `mount_path` varchar(50) DEFAULT NULL COMMENT '挂载路径',
  `is_deleted` tinyint(1) DEFAULT NULL COMMENT '0或1表示是否删除',
  PRIMARY KEY (`app_config_map_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for application
-- ----------------------------
DROP TABLE IF EXISTS `application`;
CREATE TABLE `application` (
  `super_app_id` int(11) NOT NULL AUTO_INCREMENT,
  `application_name` varchar(255) DEFAULT NULL,
  `namespace` varchar(255) DEFAULT NULL,
  `app_loc` int(8) DEFAULT NULL,
  `description` varchar(3000) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_time` timestamp NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`super_app_id`)
) ENGINE=InnoDB AUTO_INCREMENT=421 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for apps
-- ----------------------------
DROP TABLE IF EXISTS `apps`;
CREATE TABLE `apps` (
  `app_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '应用ID',
  `user_id` int(11) DEFAULT NULL COMMENT '用户ID',
  `access_address` varchar(200) DEFAULT NULL COMMENT '访问地址',
  `inner_ip` varchar(100) DEFAULT NULL,
  `use_ssl` tinyint(1) DEFAULT NULL COMMENT '是否启用ssl(https)',
  `os_uuid` varchar(100) DEFAULT NULL COMMENT 'openshift平台应用ID',
  `app_name` varchar(50) DEFAULT NULL COMMENT '应用名称',
  `description` varchar(200) DEFAULT NULL COMMENT '描述',
  `app_status` varchar(20) DEFAULT NULL COMMENT '运行状态',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `image_namespace` varchar(100) DEFAULT NULL,
  `app_loc` int(8) DEFAULT NULL,
  `customer_id` varchar(50) DEFAULT NULL COMMENT '客户ID',
  PRIMARY KEY (`app_id`),
  KEY `FK_Relationship_5` (`user_id`),
  CONSTRAINT `apps_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for charge
-- ----------------------------
DROP TABLE IF EXISTS `charge`;
CREATE TABLE `charge` (
  `charge_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '费用ID',
  `charge_url` varchar(100) DEFAULT NULL,
  `order_url` varchar(200) DEFAULT NULL,
  `customer_url` varchar(200) DEFAULT NULL,
  `close_url` varchar(100) DEFAULT NULL,
  `location` varchar(50) DEFAULT NULL,
  `cookie_str` varchar(5000) DEFAULT NULL,
  `access_key` varchar(500) DEFAULT NULL,
  `secret_key` varchar(500) DEFAULT NULL,
  `iaas_project_id` varchar(1000) DEFAULT NULL,
  `charge_flag` int(8) DEFAULT NULL,
  PRIMARY KEY (`charge_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for code_account
-- ----------------------------
DROP TABLE IF EXISTS `code_account`;
CREATE TABLE `code_account` (
  `code_account_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '源码库账号ID',
  `user_id` int(11) DEFAULT NULL COMMENT '用户ID',
  `userrname` varchar(50) DEFAULT NULL COMMENT '账号名称',
  `userpassword` varchar(256) DEFAULT NULL COMMENT '账号密码',
  `secret` varchar(256) DEFAULT NULL,
  `push_secret` varchar(256) DEFAULT NULL,
  `private_token` varchar(256) DEFAULT NULL COMMENT '秘钥',
  `service_url` varchar(256) DEFAULT NULL COMMENT '服务端地址',
  `code_type` varchar(20) DEFAULT NULL COMMENT '源码仓库类型',
  `account_status` varchar(20) DEFAULT NULL COMMENT '账号状态',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`code_account_id`),
  KEY `FK_Relationship_2` (`user_id`),
  CONSTRAINT `code_account_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for code_inspection
-- ----------------------------
DROP TABLE IF EXISTS `code_inspection`;
CREATE TABLE `code_inspection` (
  `insp_id` int(11) NOT NULL AUTO_INCREMENT,
  `insp_name` varchar(50) DEFAULT NULL,
  `code_type` varchar(20) DEFAULT NULL,
  `code_repository` varchar(200) DEFAULT NULL,
  `code_branch` varchar(200) DEFAULT NULL,
  `code_account` varchar(50) DEFAULT NULL,
  `code_account_pwd` varchar(256) DEFAULT NULL,
  `scan_directory` varchar(255) DEFAULT NULL,
  `scan_time` datetime DEFAULT NULL,
  `insp_status` varchar(20) DEFAULT NULL,
  `sonar_key` varchar(200) DEFAULT NULL,
  `sonar_server_path` varchar(255) DEFAULT NULL,
  `sonar_client_path` varchar(255) DEFAULT NULL,
  `sonar_result_url` varchar(255) DEFAULT NULL,
  `is_deleted` tinyint(1) DEFAULT NULL,
  `owner` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`insp_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for collect_images
-- ----------------------------
DROP TABLE IF EXISTS `collect_images`;
CREATE TABLE `collect_images` (
  `collect_image_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '收藏镜像ID',
  `user_id` int(11) DEFAULT NULL COMMENT '用户ID',
  `size` bigint(20) DEFAULT NULL COMMENT '大小',
  `os_uuid` varchar(100) DEFAULT NULL COMMENT 'openshift平台镜像ID',
  `image_name` varchar(50) DEFAULT NULL COMMENT '镜像名称',
  `owner_namespace` varchar(30) DEFAULT NULL COMMENT '镜像所有者的namespace',
  `image_version` varchar(20) DEFAULT NULL COMMENT '版本',
  `description` varchar(200) DEFAULT NULL COMMENT '描述',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `image_status` varchar(20) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`collect_image_id`),
  KEY `FK_Relationship_9` (`user_id`),
  CONSTRAINT `collect_images_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for config_file
-- ----------------------------
DROP TABLE IF EXISTS `config_file`;
CREATE TABLE `config_file` (
  `config_file_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '配置文件ID',
  `config_group_id` int(11) DEFAULT NULL COMMENT '配置组ID',
  `filename` varchar(50) DEFAULT NULL COMMENT '文件名',
  `content` mediumtext COMMENT '文件内容',
  `is_deleted` tinyint(1) DEFAULT NULL COMMENT '0或1表示是否删除',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`config_file_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for config_group
-- ----------------------------
DROP TABLE IF EXISTS `config_group`;
CREATE TABLE `config_group` (
  `config_group_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '配置组ID',
  `config_group_name` varchar(50) DEFAULT NULL COMMENT '配置组名称',
  `namespace` varchar(50) DEFAULT NULL COMMENT '用户的命名空间',
  `is_deleted` tinyint(1) DEFAULT NULL COMMENT '用0或1表示是否删除',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `config_group_location` int(4) DEFAULT NULL COMMENT '配置组所在的区域',
  PRIMARY KEY (`config_group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for containers
-- ----------------------------
DROP TABLE IF EXISTS `containers`;
CREATE TABLE `containers` (
  `container_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '容器ID',
  `service_id` int(11) DEFAULT NULL COMMENT '服务ID',
  `private_net_ip` varchar(50) DEFAULT NULL COMMENT '内网IP',
  `public_access_adress` varchar(200) DEFAULT NULL COMMENT '外部访问地址',
  `console_url` varchar(200) DEFAULT NULL COMMENT '控制台URL',
  `os_uuid` varchar(100) DEFAULT NULL COMMENT 'openshift容器ID',
  `container_name` varchar(50) DEFAULT NULL COMMENT '容器名称',
  `pod_name` varchar(50) DEFAULT NULL,
  `container_status` varchar(20) DEFAULT NULL COMMENT '运行状态',
  `os_img_uuid` varchar(100) DEFAULT NULL COMMENT 'openshift镜像ID',
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`container_id`),
  KEY `FK_Relationship_8` (`service_id`),
  CONSTRAINT `containers_ibfk_1` FOREIGN KEY (`service_id`) REFERENCES `services` (`service_id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for cost_rule
-- ----------------------------
DROP TABLE IF EXISTS `cost_rule`;
CREATE TABLE `cost_rule` (
  `rule_id` int(8) NOT NULL AUTO_INCREMENT,
  `type` varchar(50) DEFAULT NULL,
  `size` int(50) DEFAULT NULL,
  `cost` decimal(5,4) DEFAULT NULL,
  PRIMARY KEY (`rule_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for customer
-- ----------------------------
DROP TABLE IF EXISTS `customer`;
CREATE TABLE `customer` (
  `id` varchar(50) NOT NULL COMMENT '客户ID',
  `user_id` varchar(50) DEFAULT NULL COMMENT '用户ID',
  `is_default` tinyint(1) DEFAULT NULL COMMENT '是否默认客户',
  `name` varchar(50) DEFAULT NULL COMMENT '订阅人姓名',
  `project_id` varchar(50) DEFAULT NULL COMMENT '项目ID',
  `email` varchar(50) DEFAULT NULL COMMENT '订阅人邮箱',
  `mobile` varchar(50) DEFAULT NULL COMMENT '订阅人电话',
  `company` varchar(50) DEFAULT NULL COMMENT '订阅人所在公司',
  `department` varchar(50) DEFAULT NULL COMMENT '订阅人所在部门',
  `resource_account` varchar(50) DEFAULT NULL COMMENT '资源使用人账号',
  `resource_name` varchar(50) DEFAULT NULL COMMENT '资源使用人姓名',
  `resource_mobile` varchar(50) DEFAULT NULL COMMENT '资源使用人电话',
  `resource_company` varchar(50) DEFAULT NULL COMMENT '资源使用人所在公司',
  `resource_department` varchar(50) DEFAULT NULL COMMENT '资源使用人所在部门',
  `approver_account` varchar(50) DEFAULT NULL COMMENT '审批人账号',
  `approver_name` varchar(50) DEFAULT NULL COMMENT '审批人姓名',
  `approver_mobile` varchar(50) DEFAULT NULL COMMENT '审批人电话',
  `approver_company` varchar(50) DEFAULT NULL COMMENT '审批人所在公司',
  `approver_department` varchar(50) DEFAULT NULL COMMENT '审批人所在部门',
  `pay_company_id` int(4) DEFAULT NULL COMMENT '缴费单位ID',
  `pay_company` varchar(100) DEFAULT NULL COMMENT '缴费单位',
  `created_at` varchar(50) DEFAULT NULL COMMENT '创建时间',
  `updated_at` varchar(50) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for envs
-- ----------------------------
DROP TABLE IF EXISTS `envs`;
CREATE TABLE `envs` (
  `env_id` int(11) NOT NULL,
  `imagename` varchar(100) DEFAULT NULL,
  `tag` varchar(200) DEFAULT NULL,
  `env` varchar(1000) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`env_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for events
-- ----------------------------
DROP TABLE IF EXISTS `events`;
CREATE TABLE `events` (
  `event_id` int(11) NOT NULL AUTO_INCREMENT,
  `namespace` varchar(100) DEFAULT NULL,
  `service_id` int(11) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `first_time` datetime DEFAULT NULL,
  `last_time` datetime DEFAULT NULL,
  `delete_time` datetime DEFAULT NULL,
  `kind` varchar(100) DEFAULT NULL,
  `reason` varchar(500) DEFAULT NULL,
  `message` varchar(500) DEFAULT NULL,
  `type` varchar(50) DEFAULT NULL,
  `count` varchar(50) DEFAULT NULL,
  `source_component` varchar(100) DEFAULT NULL,
  `source_host` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`event_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for images
-- ----------------------------
DROP TABLE IF EXISTS `images`;
CREATE TABLE `images` (
  `image_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '镜像ID',
  `project_id` int(11) DEFAULT NULL COMMENT '项目ID',
  `size` bigint(20) DEFAULT NULL COMMENT '大小',
  `os_uuid` varchar(100) DEFAULT NULL COMMENT 'openshift平台镜像ID',
  `image_name` varchar(50) DEFAULT NULL COMMENT '镜像名称',
  `image_version` varchar(128) DEFAULT NULL COMMENT '版本',
  `description` varchar(200) DEFAULT NULL COMMENT '描述',
  `image_type` varchar(10) DEFAULT NULL COMMENT '公有\\私有',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `image_status` varchar(20) DEFAULT NULL COMMENT '状态',
  `security_report` longtext COMMENT '安全扫描报告',
  `bug_num` int(11) DEFAULT '0' COMMENT '漏洞数',
  `scan_status` varchar(10) DEFAULT 'NOSCAN' COMMENT '安全扫描状态',
  `scan_time` datetime DEFAULT NULL COMMENT '扫描日期',
  PRIMARY KEY (`image_id`),
  KEY `FK_Relationship_11` (`project_id`),
  CONSTRAINT `images_ibfk_1` FOREIGN KEY (`project_id`) REFERENCES `projects` (`project_id`)
) ENGINE=InnoDB AUTO_INCREMENT=97 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for messages
-- ----------------------------
DROP TABLE IF EXISTS `messages`;
CREATE TABLE `messages` (
  `message_id` int(11) NOT NULL AUTO_INCREMENT,
  `message_title` varchar(50) DEFAULT NULL,
  `content` varchar(1000) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`message_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for os_loc_info
-- ----------------------------
DROP TABLE IF EXISTS `os_loc_info`;
CREATE TABLE `os_loc_info` (
  `os_id` int(8) NOT NULL AUTO_INCREMENT,
  `location` int(8) DEFAULT NULL,
  `location_name_en` varchar(100) DEFAULT NULL COMMENT '集群英文名',
  `location_name` varchar(50) DEFAULT NULL COMMENT '集群名称',
  `pub_flag` int(8) DEFAULT NULL,
  `os_url` varchar(100) DEFAULT NULL COMMENT 'OS集群地址',
  `os_username` varchar(100) DEFAULT NULL COMMENT 'OS管理用户',
  `os_userpwd` varchar(100) DEFAULT NULL COMMENT 'OS管理用户密码',
  `os_identity_provider` varchar(100) DEFAULT NULL,
  `os_domain` varchar(100) DEFAULT NULL COMMENT '域名',
  `os_terminal_url` varchar(100) DEFAULT NULL COMMENT '控制台ws地址',
  `ldap_url` varchar(100) DEFAULT NULL,
  `ldap_port` int(10) DEFAULT NULL,
  `ldap_username` varchar(100) DEFAULT NULL,
  `ldap_userpwd` varchar(100) DEFAULT NULL,
  `ldap_dc` varchar(50) DEFAULT NULL,
  `ldap_ou` varchar(50) DEFAULT NULL,
  `ldap_sn` varchar(50) DEFAULT NULL,
  `ldap_objectClass` varchar(50) DEFAULT NULL,
  `harbor_url` varchar(100) DEFAULT NULL,
  `harbor_docker_url` varchar(100) DEFAULT NULL COMMENT 'harbor监听地址',
  `nfs_base_url` varchar(100) DEFAULT NULL COMMENT 'nfs地址',
  `nfs_ip` varchar(50) DEFAULT NULL COMMENT 'nfs IP',
  `monitor_url` varchar(50) DEFAULT NULL COMMENT '监控地址',
  `log_url` varchar(50) DEFAULT NULL COMMENT '容器日志url',
  `image_ip` varchar(100) DEFAULT NULL,
  `image_security_url` varchar(100) DEFAULT NULL COMMENT '镜像扫描地址',
  `cpu_proportion` int(8) DEFAULT NULL COMMENT '超配因子',
  `mem_proportion` varchar(10) DEFAULT NULL COMMENT '冗余比例',
  `default_use` tinyint(1) DEFAULT NULL,
  `is_lock` tinyint(1) DEFAULT NULL,
  `node_max_pod` int(11) DEFAULT NULL COMMENT '节点最大pod数',
  `pod_net_transmit_limit` decimal(10,2) DEFAULT NULL COMMENT 'pod网络限制上行',
  `pod_vol_limit` decimal(10,2) DEFAULT NULL COMMENT '磁盘限制',
  `pod_net_receive_limit` decimal(10,2) DEFAULT NULL COMMENT 'pod网络限制下行',
  PRIMARY KEY (`os_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for os_users_pool
-- ----------------------------
DROP TABLE IF EXISTS `os_users_pool`;
CREATE TABLE `os_users_pool` (
  `os_users_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `os_users_name` varchar(50) NOT NULL COMMENT '名称',
  `is_used` tinyint(1) DEFAULT '0' COMMENT '是否被使用默认0',
  `is_keep` tinyint(1) DEFAULT '0' COMMENT '是否保留默认0',
  `use_user_id` int(11) DEFAULT NULL COMMENT '使用者ID',
  PRIMARY KEY (`os_users_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for projects
-- ----------------------------
DROP TABLE IF EXISTS `projects`;
CREATE TABLE `projects` (
  `project_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '项目ID',
  `user_id` int(11) DEFAULT NULL COMMENT '用户ID',
  `namespace` varchar(100) DEFAULT NULL COMMENT '命名空间',
  `code_account_id` int(11) DEFAULT NULL COMMENT '源码库账号ID',
  `last_build_time` datetime DEFAULT NULL COMMENT '上次构建时间',
  `image_name` varchar(50) DEFAULT NULL COMMENT '镜像仓库名称',
  `image_version` varchar(128) DEFAULT NULL COMMENT '当前run的镜像版本',
  `code_type` varchar(20) DEFAULT NULL COMMENT '仓库类型',
  `code_repository` varchar(200) DEFAULT NULL COMMENT '代码仓库地址',
  `svn_repository` varchar(200) DEFAULT NULL COMMENT 'SVN地址',
  `dockerfile` varchar(200) DEFAULT NULL COMMENT 'dockerfile位置',
  `code_branch` varchar(200) DEFAULT NULL COMMENT '代码分支',
  `use_cache` tinyint(1) DEFAULT NULL COMMENT '是否使用缓存',
  `auto_build` tinyint(1) DEFAULT NULL COMMENT '是否自动构建',
  `build_config` varchar(500) DEFAULT NULL COMMENT '自动构建配置(json)',
  `project_name` varchar(50) DEFAULT NULL COMMENT '项目名称',
  `project_type` varchar(20) DEFAULT NULL COMMENT '项目类型',
  `description` varchar(200) DEFAULT NULL COMMENT '描述',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `project_status` varchar(20) DEFAULT NULL COMMENT '项目状态',
  `duration` int(12) DEFAULT NULL COMMENT '持续时间（单位：秒）',
  `web_hook` varchar(256) DEFAULT NULL COMMENT 'web_hook',
  `build_type` varchar(20) DEFAULT NULL COMMENT '构建类型',
  `builder_tag` varchar(200) DEFAULT NULL COMMENT 'builder镜像',
  `source_package_name` varchar(50) DEFAULT NULL COMMENT '安装包源文件名',
  `package_path` varchar(200) DEFAULT NULL COMMENT '安装包路径',
  `auto_scan` tinyint(1) DEFAULT NULL COMMENT '是否自动安全扫描',
  `platform_type` int(1) DEFAULT '0' COMMENT '1：平台镜像 2：builder镜像',
  `is_pushed` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`project_id`),
  KEY `FK_Relationship_10` (`user_id`),
  KEY `FK_Relationship_3` (`code_account_id`),
  CONSTRAINT `projects_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`),
  CONSTRAINT `projects_ibfk_2` FOREIGN KEY (`code_account_id`) REFERENCES `code_account` (`code_account_id`)
) ENGINE=InnoDB AUTO_INCREMENT=113 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for quotas_config
-- ----------------------------
DROP TABLE IF EXISTS `quotas_config`;
CREATE TABLE `quotas_config` (
  `quota_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `max_cpu` varchar(50) DEFAULT NULL,
  `max_mem` varchar(50) DEFAULT NULL,
  `max_vol` varchar(50) DEFAULT NULL,
  `max_net` varchar(50) DEFAULT NULL,
  `max_images` varchar(50) DEFAULT NULL COMMENT 'tag',
  `max_projects` varchar(50) DEFAULT NULL,
  `used_cpu` varchar(50) DEFAULT NULL,
  `used_mem` varchar(50) DEFAULT NULL,
  `used_vol` varchar(50) DEFAULT NULL,
  `used_net` varchar(50) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`quota_id`)
) ENGINE=InnoDB AUTO_INCREMENT=799 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for reply
-- ----------------------------
DROP TABLE IF EXISTS `reply`;
CREATE TABLE `reply` (
  `reply_id` int(4) NOT NULL AUTO_INCREMENT,
  `work_order_id` int(4) DEFAULT NULL,
  `replier_id` int(4) DEFAULT NULL,
  `reply_content` varchar(5000) DEFAULT NULL,
  `attach_path` varchar(100) DEFAULT NULL,
  `reply_time` datetime DEFAULT NULL,
  `replier_name` varchar(20) DEFAULT NULL,
  `replier_role` int(4) DEFAULT NULL,
  PRIMARY KEY (`reply_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for resource_warning
-- ----------------------------
DROP TABLE IF EXISTS `resource_warning`;
CREATE TABLE `resource_warning` (
  `warning_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `app_id` int(11) DEFAULT NULL COMMENT '服务ID',
  `user_id` int(11) DEFAULT NULL COMMENT '用户ID',
  `app_name` varchar(50) DEFAULT NULL COMMENT '服务名称',
  `cpu` decimal(12,2) DEFAULT NULL COMMENT 'cpu预警',
  `mem` decimal(12,2) DEFAULT NULL COMMENT '内存预警',
  `net_send` decimal(12,2) DEFAULT NULL,
  `net_receive` decimal(12,2) DEFAULT NULL COMMENT '带宽预警',
  `vol` decimal(12,2) DEFAULT NULL COMMENT '存储预警',
  `contacts` varchar(5000) DEFAULT NULL COMMENT '联系人json',
  `warning_interval` int(11) DEFAULT NULL COMMENT '间隔时间',
  `warning_type` int(1) DEFAULT NULL COMMENT '1: 手机和邮箱 2: 仅手机 3: 仅邮箱',
  `warning_status` int(1) DEFAULT NULL COMMENT '1: 开启 0: 关闭',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `app_loc` int(8) DEFAULT NULL COMMENT 'app地域',
  PRIMARY KEY (`warning_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for rest_user
-- ----------------------------
DROP TABLE IF EXISTS `rest_user`;
CREATE TABLE `rest_user` (
  `rest_user_id` int(4) NOT NULL AUTO_INCREMENT,
  `namespace` varchar(50) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `modified_time` datetime DEFAULT NULL,
  PRIMARY KEY (`rest_user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `role_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  `role_name` varchar(20) DEFAULT NULL COMMENT '角色名称',
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='用户角色表';

-- ----------------------------
-- Table structure for s2i_envs
-- ----------------------------
DROP TABLE IF EXISTS `s2i_envs`;
CREATE TABLE `s2i_envs` (
  `s2i_env_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `builder_name` varchar(50) DEFAULT NULL,
  `env_key` varchar(50) DEFAULT NULL,
  `env_value` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`s2i_env_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for sales
-- ----------------------------
DROP TABLE IF EXISTS `sales`;
CREATE TABLE `sales` (
  `sale_id` int(8) NOT NULL AUTO_INCREMENT,
  `type` varchar(50) DEFAULT NULL,
  `size` int(50) DEFAULT NULL,
  `sale` decimal(3,2) DEFAULT NULL,
  PRIMARY KEY (`sale_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for services
-- ----------------------------
DROP TABLE IF EXISTS `services`;
CREATE TABLE `services` (
  `service_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '服务ID',
  `service_uuid` varchar(50) DEFAULT NULL,
  `app_id` int(11) DEFAULT NULL COMMENT '应用ID',
  `env_config` varchar(5000) DEFAULT NULL COMMENT '环境变量配置(json)',
  `port_config` varchar(5000) DEFAULT NULL COMMENT '端口映射(json)',
  `c_num` int(11) DEFAULT NULL COMMENT '容器数量',
  `service_name` varchar(50) DEFAULT NULL COMMENT '服务名称',
  `description` varchar(200) DEFAULT NULL COMMENT '描述',
  `service_status` varchar(20) DEFAULT NULL COMMENT '运行状态',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `cpu` varchar(50) DEFAULT NULL COMMENT 'cpu',
  `mem` varchar(50) DEFAULT NULL COMMENT 'mem',
  `net` varchar(50) DEFAULT NULL COMMENT 'net',
  `disk` varchar(50) DEFAULT NULL COMMENT 'disk',
  `session_flag` tinyint(1) DEFAULT NULL,
  `lb_type` varchar(200) DEFAULT NULL,
  `service_url` varchar(200) DEFAULT NULL COMMENT '服务访问地址',
  `hub_type` varchar(50) DEFAULT NULL,
  `image_name` varchar(200) DEFAULT NULL,
  `image_namespace` varchar(100) DEFAULT NULL,
  `auto_deploy_flag` varchar(4) DEFAULT NULL,
  PRIMARY KEY (`service_id`),
  KEY `FK_Relationship_7` (`app_id`),
  CONSTRAINT `services_ibfk_1` FOREIGN KEY (`app_id`) REFERENCES `apps` (`app_id`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for super_apps
-- ----------------------------
DROP TABLE IF EXISTS `super_apps`;
CREATE TABLE `super_apps` (
  `application_id` int(11) NOT NULL AUTO_INCREMENT,
  `application_name` varchar(255) DEFAULT NULL,
  `app_id` int(11) DEFAULT NULL,
  `namespace` varchar(255) DEFAULT NULL,
  `app_loc` int(8) DEFAULT NULL,
  `super_app_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`application_id`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for sys_logs
-- ----------------------------
DROP TABLE IF EXISTS `sys_logs`;
CREATE TABLE `sys_logs` (
  `log_id` int(11) NOT NULL AUTO_INCREMENT,
  `oper_type` int(11) DEFAULT NULL,
  `oper_type_name` varchar(30) DEFAULT NULL,
  `oper_type_name_en` varchar(30) DEFAULT NULL,
  `oper_user_id` int(11) DEFAULT NULL,
  `oper_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `oper_user_ip` varchar(50) DEFAULT NULL,
  `oper_content` varchar(300) DEFAULT NULL,
  `oper_content_en` varchar(300) DEFAULT NULL,
  `oper_title` varchar(100) DEFAULT NULL,
  `oper_title_en` varchar(100) DEFAULT NULL,
  `log_loc` int(8) DEFAULT NULL,
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB AUTO_INCREMENT=89417 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for temp_quota
-- ----------------------------
DROP TABLE IF EXISTS `temp_quota`;
CREATE TABLE `temp_quota` (
  `temp_quota_id` int(8) NOT NULL AUTO_INCREMENT,
  `cpu` int(8) DEFAULT NULL,
  `mem` int(50) DEFAULT NULL,
  PRIMARY KEY (`temp_quota_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for template
-- ----------------------------
DROP TABLE IF EXISTS `template`;
CREATE TABLE `template` (
  `template_id` int(8) NOT NULL AUTO_INCREMENT,
  `template_name` varchar(50) DEFAULT NULL,
  `data_yaml` varchar(5000) DEFAULT NULL,
  `data_json` varchar(5000) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `user_id` int(8) DEFAULT NULL,
  `description_en` text,
  `description` varchar(5000) DEFAULT NULL,
  `namespace` varchar(100) DEFAULT NULL,
  `image_name` varchar(2000) DEFAULT NULL,
  `temp_type` varchar(10) DEFAULT NULL,
  `app_type` varchar(50) DEFAULT NULL,
  `count` int(20) DEFAULT NULL,
  `roll_url` varchar(500) DEFAULT NULL,
  `pic_url_small` varchar(500) DEFAULT NULL,
  `pic_url` varchar(500) DEFAULT NULL,
  `temp_cpu` varchar(10) DEFAULT NULL,
  `temp_mem` varchar(10) DEFAULT NULL,
  `temp_vol` varchar(10) DEFAULT NULL,
  `temp_pod` varchar(10) DEFAULT NULL,
  `size_type` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`template_id`)
) ENGINE=InnoDB AUTO_INCREMENT=913 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for user_loc_map
-- ----------------------------
DROP TABLE IF EXISTS `user_loc_map`;
CREATE TABLE `user_loc_map` (
  `user_loc_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `loc_id` int(8) DEFAULT NULL,
  `push_secret` varchar(200) DEFAULT NULL,
  `image_namespace` varchar(100) DEFAULT NULL,
  `harbor_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`user_loc_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2685 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `role_id` int(11) DEFAULT NULL COMMENT '角色ID',
  `os_username` varchar(50) DEFAULT NULL COMMENT 'openshift用户名',
  `os_password` varchar(256) DEFAULT NULL COMMENT 'openshift用户密码',
  `phone` varchar(20) DEFAULT NULL COMMENT '手机号',
  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',
  `image_namespace` varchar(100) DEFAULT NULL COMMENT '镜像命名空间',
  `username` varchar(50) DEFAULT NULL COMMENT '用户名',
  `description` varchar(200) DEFAULT NULL COMMENT '描述',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `user_status` varchar(20) DEFAULT NULL COMMENT '状态',
  `user_type` varchar(20) DEFAULT NULL COMMENT '账号类型',
  `hna_account_id` varchar(64) DEFAULT NULL COMMENT '一账通用户ID',
  `harbor_id` int(11) DEFAULT NULL COMMENT 'harbor',
  PRIMARY KEY (`user_id`),
  KEY `FK_Relationship_1` (`role_id`),
  CONSTRAINT `users_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `roles` (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=803 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='用户表';

-- ----------------------------
-- Table structure for vol_app
-- ----------------------------
DROP TABLE IF EXISTS `vol_app`;
CREATE TABLE `vol_app` (
  `vol_app_id` int(11) NOT NULL AUTO_INCREMENT,
  `vol_id` int(11) DEFAULT NULL,
  `app_id` int(11) DEFAULT NULL,
  `vol_mount` varchar(500) DEFAULT NULL,
  `app_name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`vol_app_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for volumes
-- ----------------------------
DROP TABLE IF EXISTS `volumes`;
CREATE TABLE `volumes` (
  `vol_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `vol_uuid` varchar(50) DEFAULT NULL,
  `vol_user_id` int(11) DEFAULT NULL COMMENT 'user_id',
  `vol_namespace` varchar(20) DEFAULT NULL COMMENT 'namespace',
  `vol_name` varchar(30) DEFAULT NULL COMMENT '名称',
  `vol_status` varchar(20) DEFAULT NULL COMMENT '状态（1：已挂载，2：未挂载）',
  `vol_format` varchar(50) DEFAULT NULL COMMENT '格式',
  `vol_size` int(11) DEFAULT NULL COMMENT '大小（以M为单位）',
  `vol_create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `vol_description` varchar(100) DEFAULT NULL COMMENT '描述',
  `vol_labels` varchar(20) DEFAULT NULL COMMENT '卷的标签',
  `vol_access_mode` varchar(20) DEFAULT NULL COMMENT '访问模式',
  `vol_loc` int(8) DEFAULT NULL COMMENT '地区',
  `customer_id` varchar(50) DEFAULT NULL COMMENT '客户ID',
  PRIMARY KEY (`vol_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for work_order
-- ----------------------------
DROP TABLE IF EXISTS `work_order`;
CREATE TABLE `work_order` (
  `work_order_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `namespace` varchar(100) DEFAULT NULL,
  `title` varchar(50) DEFAULT NULL,
  `details` varchar(300) DEFAULT NULL,
  `type` varchar(20) DEFAULT NULL,
  `answer` varchar(300) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `answer_flag` int(4) DEFAULT NULL,
  `handler_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`work_order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;



-- ----------------------------
--  Records of `envs`
-- ----------------------------
BEGIN;
INSERT INTO `envs` VALUES ('1', 'mysql', '5.5', 'MYSQL_ROOT_PASSWORD', '2016-08-16 10:13:06', '2016-08-16 10:13:10'), ('2', 'mysql', '5.6', 'MYSQL_ROOT_PASSWORD', '2016-08-16 11:14:10', '2016-08-16 11:14:13'), ('3', 'mysql', 'latest', 'MYSQL_ROOT_PASSWORD', '2016-08-16 11:15:08', '2016-08-16 11:15:11'), ('4', 'mongodb', '2.4', 'MONGODB_USER,MONGODB_PASSWORD,MONGODB_DATABASE,MONGODB_ADMIN_PASSWORD', '2016-08-16 11:16:10', '2016-08-16 11:16:14'), ('5', 'mongodb', '2.6', 'MONGODB_USER,MONGODB_PASSWORD,MONGODB_DATABASE,MONGODB_ADMIN_PASSWORD', '2016-08-16 11:16:37', '2016-08-16 11:16:39'), ('6', 'mongodb', '3.2', 'MONGODB_USER,MONGODB_PASSWORD,MONGODB_DATABASE,MONGODB_ADMIN_PASSWORD', '2016-08-16 11:16:55', '2016-08-16 11:16:59'), ('7', 'mongodb', 'latest', 'MONGODB_USER,MONGODB_PASSWORD,MONGODB_DATABASE,MONGODB_ADMIN_PASSWORD', '2016-08-16 11:17:15', '2016-08-16 11:17:18'), ('8', 'mariadb', '10.1', 'MYSQL_ROOT_PASSWORD', '2016-08-22 15:45:16', '2016-08-22 15:45:19'), ('9', 'mariadb', 'latest', 'MYSQL_ROOT_PASSWORD', '2016-08-22 15:45:42', '2016-08-22 15:45:45'), ('10', 'postgresql', '9.2', 'POSTGRESQL_ADMIN_PASSWORD', '2016-08-22 16:20:23', '2016-08-22 16:20:28'), ('11', 'postgresql', '9.4', 'POSTGRESQL_ADMIN_PASSWORD', '2016-08-22 16:21:19', '2016-08-22 16:21:22'), ('12', 'postgresql', '9.5', 'POSTGRESQL_ADMIN_PASSWORD', '2016-08-22 16:21:37', '2016-08-22 16:21:41'), ('13', 'postgresql', 'latest', 'POSTGRESQL_ADMIN_PASSWORD', '2016-08-22 16:21:56', '2016-08-22 16:21:59'), ('14', 'mysql', '5.7', 'MYSQL_ROOT_PASSWORD', '2017-05-24 10:50:09', '2017-05-24 10:50:12');
COMMIT;


-- ----------------------------
--  Records of `quotas_config`
-- ----------------------------
BEGIN;
INSERT INTO `quotas_config` VALUES ('760', '764', '100', '102400', '102400', '200', '30', '30', null, null, null, null, '2018-05-18 18:00:30', '2018-05-18 18:00:30');
COMMIT;


-- ----------------------------
--  Records of `roles`
-- ----------------------------
BEGIN;
INSERT INTO `roles` VALUES ('1', 'admin');
COMMIT;

-- ----------------------------
--  Records of `sys_logs`
-- ----------------------------
BEGIN;
INSERT INTO `sys_logs` VALUES ('89058', '1', '登录', 'login', '764', '2018-05-18 18:00:39', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89059', '1', '登录', 'login', '764', '2018-05-21 09:15:31', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89060', '1', '登录', 'login', '764', '2018-05-21 09:15:31', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89061', '1', '登录', 'login', '764', '2018-05-21 09:15:31', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89062', '1', '登录', 'login', '764', '2018-05-21 09:15:31', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89063', '1', '登录', 'login', '764', '2018-05-21 09:15:31', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89064', '1', '登录', 'login', '764', '2018-05-21 09:15:31', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null), ('89065', '1', '登录', 'login', '764', '2018-05-21 09:15:33', null, 'ID:764,用户名:test 登录成功', 'ID:764,username:test login successful', null, null, null);
COMMIT;


-- ----------------------------
--  Records of `temp_quota`
-- ----------------------------
BEGIN;
INSERT INTO `temp_quota` VALUES ('1', '1', '1'), ('2', '1', '2'), ('3', '2', '2'), ('4', '2', '4'), ('5', '4', '4'), ('6', '4', '8'), ('7', '8', '8'), ('8', '8', '16'), ('9', '16', '16'), ('10', '16', '32'), ('11', '32', '32'), ('12', '32', '64');
COMMIT;





-- ----------------------------
-- Records of template
-- ----------------------------
INSERT INTO `template` VALUES ('3', 'mysql', 'services:\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', 'services:\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', '2016-12-30 20:12:57', '2017-09-08 15:03:36', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MySQL is the world\'s most popular open source and relational database management system. With its proven performance, reliability and ease-of-use, MySQL has become the leading database choice for web-based applications, covering the entire range from personal projects and websites, via e-commerce and information services, all the way to high profile web properties including Facebook, Twitter, YouTube and many more.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_ROOT_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of root user, and the default value is : password<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_DATABASE &nbsp&nbsp&nbsp&nbsp When you create a new mysql, if you have set your user/password, the system will give super use permissions to the user. Default no configuration.<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_USER &nbsp&nbsp&nbsp&nbsp Creating new user. Default no configuration.<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of the new user. Default no configuration.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Mysql是世界上最受欢迎的开源数据库，它是一种关系型数据库管理系统。由于它的高性能，可靠性和易用性，MySQL已经成为基于Web的应用程序的数据库首选，覆盖范围包括个人项目和网站，电子商务和信息服务，以及社交网络，如Facebook，Twitter，YouTube等。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_ROOT_PASSWORD &nbsp&nbsp&nbsp&nbsp ROOT用户密码，默认值：password<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_DATABASE &nbsp&nbsp&nbsp&nbsp 新建数据库，如果user/password被设置，将赋予该user对该数据库的超级使用权限。默认无配置<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_USER &nbsp&nbsp&nbsp&nbsp 新建用户。默认无配置<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_PASSWORD &nbsp&nbsp&nbsp&nbsp 新建用户的密码。默认无配置<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6', 'appshop', 'midware', '9', 'mysql1.png,mysql2.png', 'mysql.png', 'mysql.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('5', 'redis', 'services:\n redis:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redis:3.2.3\n  ports:\n    - port: 6379\n      protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', 'services:\n redis:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/redis:3.2.3\n  ports:\n    - port: 6379\n      protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', '2016-12-30 20:13:04', '2017-12-14 10:17:18', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp The name Redis means REmote DIctionary Server Which is written by SalvatoreSanfilippo a key-value storage system. Redis is an open source (with BSD licensed) and written in ANSIC language, networked, in-memory, key-value data store with optional durability. Besides, it provides several language APIs.<br>\r\n&nbsp&nbsp&nbsp&nbsp Redis is often referred as data structures database , so that the key stores the value which contains strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. <br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp No redis.conf file. Please check or modify config dynamically with the client commands: redis-cli.\r\nDefault no password.<br>\r\n	&nbsp&nbsp&nbsp&nbsp Method: Enter redis-cli-h{ADDR}-p{PORT}[-a{PASS}] <br>\r\n	&nbsp&nbsp&nbsp&nbsp Operation command, for example, checking config CONFIGGET{parameter}\r\n(To check all configs: CONFIGGET*) ;<br>\r\n	&nbsp&nbsp&nbsp&nbsp Or modifying config: CONFIGSET{parameter}{value}<br>\r\n	&nbsp&nbsp&nbsp&nbsp For more commands, please visit and check: https://redis.io/commands<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>\r\n&nbsp&nbsp&nbsp&nbsp 它通常被称为数据结构服务器，因为键（key）存储的值（value）可以包含string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)、hash（哈希类型）、bitmaps（位图）和hyperloglogs（超文本）。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 无redis.conf文件。请使用客户端命令redis-cli查看或动态更改配置。默认无密码。<br>\r\n	&nbsp&nbsp&nbsp&nbsp 用法 redis-cli -h {ADDR} -p {PORT} [-a {PASS}] <br>\r\n	&nbsp&nbsp&nbsp&nbsp 操作命令如，查看配置 CONFIG GET {parameter} （查看所有配置 CONFIG GET * ）<br>\r\n	&nbsp&nbsp&nbsp&nbsp 修改配置 CONFIG SET {parameter} {value}<br>\r\n	&nbsp&nbsp&nbsp&nbsp 更多命令，请阅 https://redis.io/commands<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redis:3.2.3', 'appshop', 'midware', '16', 'redis1.png,Redis2.png', 'redis.png', 'redis.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('7', 'mongodb', 'services:\n mongo:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2\n  ports:\n    - port: 27017\n      protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    MONGODB_USER: hcpaas\n    MONGODB_PASSWORD: hcpaas123\n    MONGODB_DATABASE: hcpaasdb\n    MONGODB_ADMIN_PASSWORD: adminpwd123\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', 'services:\n mongo:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2\n  ports:\n    - port: 27017\n      protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    MONGODB_USER: hcpaas\n    MONGODB_PASSWORD: hcpaas123\n    MONGODB_DATABASE: hcpaasdb\n    MONGODB_ADMIN_PASSWORD: adminpwd123\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', '2016-12-30 20:13:10', '2017-12-21 23:42:19', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MongoDB is a cross-platform document-oriented database. Classified as a NoSQL database, MongoDB eschews the traditional table-based relational database structure. It stores data as a document, and the data structure consists of key-value pairs which contain other documents, arrays and document arrays, making the integration of data in certain types of applications easier and faster<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_ADMIN_PASSWORD &nbsp&nbsp&nbsp&nbsp Admin user password. Default Value：adminpwd123<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_DATABASE &nbsp&nbsp&nbsp&nbsp  Creating new database. If user/password is set up, the user will be allocated super use permissions of the database. Default creating: hcpaasdb<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_USER &nbsp&nbsp&nbsp&nbsp Creating new user. Default Value：hcpaas<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of new user. Default Value: hcpaas123<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp MongoDB是一个跨平台的面向文档的数据库。MongoDB被归类为NoSQL数据库，避开了传统的基于表的关系型数据库结构。它将数据存储为一个文档，数据结构由键值(key=>value)对组成，字段值可以包含其他文档、数组及文档数组，从而使数据在某些类型的应用程序中的集成更加容易快捷。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_ADMIN_PASSWORD &nbsp&nbsp&nbsp&nbsp 管理员用户密码。默认值：adminpwd123<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_DATABASE &nbsp&nbsp&nbsp&nbsp  新建数据库。如果user/password被设置，将赋予该user对该数据库的超级使用权限。默认创建：hcpaasdb<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_USER &nbsp&nbsp&nbsp&nbsp 新建用户。默认值：hcpaas<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_PASSWORD &nbsp&nbsp&nbsp&nbsp 新建用户的密码。默认值：hcpaas123<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2', 'appshop', 'midware', '9', 'mongoDB1.png,mongoDB2.png', 'mongodb.png', 'mongodb.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('9', 'wordpress', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: pwd123456\n      MYSQL_DATABASE: wordpress\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024      \n  wordpress:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      WORDPRESS_DB_HOST: ${name}-mysql\n      WORDPRESS_DB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: pwd123456\n      MYSQL_DATABASE: wordpress\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024      \n  wordpress:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      WORDPRESS_DB_HOST: ${name}-mysql\n      WORDPRESS_DB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', '2017-03-23 20:13:20', '2017-12-21 23:29:05', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp WordPress is one of the most popular open source blogging tool and a content management system (CMS). It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp WordPress是市场上最通用的开源内容管理系统之一。它功能强大，易于扩展，易于通过REST，JSON，SOAP以及多种格式集成，拥有多达1500种插件去扩展和定制应用程序的各种类型的站点。<br><br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7', 'appshop', 'enterprise', '76', 'wordpress.png,wordpress2.png', 'wordpress.png', 'wordpress.png', '2', '4096', '2048', '2', 'small');
INSERT INTO `template` VALUES ('11', 'gitlab', 'services:\n gitlab:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/gitlab-ce:9.5.4-caas\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    AUTH: no\n  volumeMounts:\n      - name: data1\n        mountPath: /var/opt/gitlab\n        volSize: 1024\n      - name: data2\n        mountPath: /var/log/gitlab\n        volSize: 1024', 'services:\n gitlab:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/gitlab-ce:9.5.4-caas\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1000m\n  environment:\n    AUTH: no\n  volumeMounts:\n      - name: data1\n        mountPath: /var/opt/gitlab\n        volSize: 1024\n      - name: data2\n        mountPath: /var/log/gitlab\n        volSize: 1024', '2017-01-31 20:13:27', '2017-10-18 17:03:33', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp GitLab is the only platform that brings the 100% software development lifecycle into a single interface, helping you eliminate unnecessary steps from the workflow and focus on building and delivering excellent software.\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default sign-in account: root<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default sign-in password: Setting it when you first login', '简介：<br>\n&nbsp&nbsp&nbsp&nbsp GitLab是将100％的软件开发生命周期带入单一界面的唯一平台，帮助您从工作流程中消除不必要的步骤，专注于构建和运送出色的软件。<br>\n配置信息： <br>\n&nbsp&nbsp&nbsp&nbsp 默认登录账号: root <br>\n&nbsp&nbsp&nbsp&nbsp 默认登录密码: 首次登录设置', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/gitlab-ce:9.5.4-caas', 'appshop', 'security', '38', 'gitlab1.png,gitlab2.png', 'gitlab.png', 'gitlab.png', '1', '2048', '2048', '1', 'small');
INSERT INTO `template` VALUES ('13', 'jenkins', 'services:\n jenkins:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jenkins:2\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  volumeMounts:\n      - name: data\n        mountPath: /var/jenkins_home\n        volSize: 1024', 'services:\n jenkins:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/jenkins:2\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4Gi\n  cpu_shares: 1000m\n  volumeMounts:\n      - name: data\n        mountPath: /var/jenkins_home\n        volSize: 1024', '2017-01-31 20:13:32', '2017-11-09 20:29:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jenkins is an individual open source automation server which can be used to automate various missions, such as building, testing and deploying software. Jenkins can be installed by the native system package Docker, and run independently by any machine that installs JavaRuntimeEnvironment.\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password:user/bitnami', '简介：<br>\n\n&nbsp&nbsp&nbsp&nbsp Jenkins是一个独立的开源自动化服务器，可用于自动化各种任务，如构建，测试和部署软件。Jenkins可以通过本机系统包Docker安装，甚至可以通过安装Java Runtime Environment的任何机器独立运行。<br><br>\n\n配置信息：<br>\n\n&nbsp&nbsp&nbsp&nbsp 默认登录账号密码：  user/bitnami<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jenkins:2', 'appshop', 'security', '38', 'jenkins1.png,jenkins2.png', 'jenkins.png', 'jenkins.png', '4', '8192', '1024', '1', 'small');
INSERT INTO `template` VALUES ('14', 'httpd', 'services:\n  httpd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/httpd:2.4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    volumeMounts:\n      - name: httpddata\n        mountPath: /usr/local/apache2/htdocs\n        volSize: 1024', 'services:\n  httpd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/httpd:2.4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    volumeMounts:\n      - name: httpddata\n        mountPath: /usr/local/apache2/htdocs\n        volSize: 1024', '2016-12-30 21:26:18', '2017-10-18 18:55:02', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Httpd is the main program of the Apache Hypertext Transfer Protocol (HTTP) server. It is designed to be an independent daemon that creates a pool of threads or subprocess that processes requests.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp HTTPD_PREFIX &nbsp&nbsp&nbsp&nbsp Installation Directory: /usr/local/apache2。Config File: /usr/local/apache2/conf/httpd.conf<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default File Path: /usr/local/apache2/htdocs/<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Httpd是Apache超文本传输协议(HTTP)服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp HTTPD_PREFIX &nbsp&nbsp&nbsp&nbsp 安装目录：/usr/local/apache2。配置文件 /usr/local/apache2/conf/httpd.conf<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认文件目录 /usr/local/apache2/htdocs/<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/httpd:2.4', 'appshop', 'midware', '15', 'httpd1.png,httpd2.png', 'httpd.png', 'httpd.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('17', 'redmine', 'services:\n redmine:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redmine:3.3.2.stable\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    DB_HOST: ${name}-mysql\n    DB_PASS: password\n  volumeMounts:\n      - name: data1\n        mountPath: /usr/src/redmine/files\n        volSize: 1024\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data2\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', 'services:\n redmine:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/redmine:3.3.2.stable\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  environment:\n    DB_HOST: ${name}-mysql\n    DB_PASS: password\n  volumeMounts:\n      - name: data1\n        mountPath: /usr/src/redmine/files\n        volSize: 1024\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data2\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', '2016-12-30 21:32:32', '2017-10-24 09:06:05', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Redmine is a free and open source, web-based project management and issue tracking tool. It allows users to manage multiple projects and associated subprojects. It features per project wikis and forums, time tracking, and flexible role based access control. It includes a calendar and Gantt charts to aid visual representation of projects and their deadlines. Redmine integrates with various version control systems and includes a repository browser and diff viewer.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_NO_DB_MIGRATE &nbsp&nbsp&nbsp&nbsp This variable allows to control the rakedb:migrate that if it is running when the container is starting up.<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_SECRET_KEY_BASE &nbsp&nbsp&nbsp&nbsp This variable is used to create an initial config/secrets.yml, and configure the value of secret_key_base.<br>\r\n	&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp The‘Rails’is used to store Cookie of coding session data so that prevents being distorted.<br>	\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password is admin/admin, and it is modified compulsively when you first sign in.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Redmine是一个免费的开放源码，基于Web的项目管理和问题跟踪工具。 它允许用户管理多个项目和相关子项目。 它具有每个项目维基和论坛，时间跟踪和灵活的基于角色的访问控制。 它包括一个日历和甘特图，以帮助项目的视觉表示及其截止日期。 Redmine与各种版本控制系统集成，并包括存储库浏览器和差异查看器。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_NO_DB_MIGRATE &nbsp&nbsp&nbsp&nbsp 该变量允许您控制rake db：migrate是否在容器启动时运行。<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_SECRET_KEY_BASE &nbsp&nbsp&nbsp&nbsp 该变量用于创建一个初始config/secrets.yml，并设置secret_key_base值，<br>\r\n	&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp “Rails”用于编码存储会话数据的Cookie，从而防止其篡改。<br>	\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin ，首次登陆强制修改。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redmine:3.3.2.stable,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6', 'appshop', 'basic', '17', 'redmine1.png,redmine2.png', 'redmine.png', 'redmine.png', '2', '4096', '2048', '2', 'small');
INSERT INTO `template` VALUES ('19', 'jetty', 'services:\n jetty:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jetty:9.4\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    AUTH: no', 'services:\n jetty:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/jetty:9.4\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  environment:\n    AUTH: no', '2016-12-30 21:35:43', '2017-10-18 13:45:13', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jetty is a Java-based HTTP (Web) server and Java Servlet container. Jetty is developed as a free commercial application and open source project as part of the Eclipse Foundation. The web server is used in piles of successful products such as ApacheGeromino，JBoss，IBMTivoli and CiscoSESM. Jetty supports the latest Java Servlet API (with JSP support) as well as protocols SPDY and WebSocket.  While Jetty is usually associated with serving documents to people, it is basically used for Web Server which is easily embedded into Java applications.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_HOME &nbsp&nbsp&nbsp&nbsp Installation directory of jetty. Default Value: /usr/local/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_BASE &nbsp&nbsp&nbsp&nbsp Fundamental path of Jetty instance, and this path saves the configuration and deployment path of jetty instance. Deploying path of the Web application is: $JETTY_BASE/webapps. Default Value: /var/lib/jetty/webapps/</b><br>\r\n	&nbsp&nbsp&nbsp&nbsp TMPDIR &nbsp&nbsp&nbsp&nbsp Temporary file of Jetty. Default Value: /tmp/jetty<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jetty是一个由Java实现、开源、基于标准的HTTP（Web）服务器和Java Servlet容器。它是Eclipse基金会的项目之一，可以免费地用于商业行为。现在已经有非常多的成功产品基于Jetty，比如 Apache Geromino，JBoss，IBM Tivoli，Cisco SESM 等。Jetty支持最新的Java Servlet API（支持JSP）以及协议SPDY和WebSocket，可以用来作为一个传统的Web服务器，也可以作为一个动态的内容服务器，并且Jetty可以非常容易的嵌入到Java应用程序当中。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_HOME &nbsp&nbsp&nbsp&nbsp Jetty的安装目录。默认值：/usr/local/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_BASE &nbsp&nbsp&nbsp&nbsp Jetty实例的基础路径，该路径保存了Jetty实例的配置以及部署目录等，<b>Web应用的部署目录为$JETTY_BASE/webapps。默认值：/var/lib/jetty/webapps</b><br>\r\n	&nbsp&nbsp&nbsp&nbsp TMPDIR &nbsp&nbsp&nbsp&nbsp Jetty的临时文件夹。默认值：/tmp/jetty<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jetty:9.4', 'appshop', 'midware', '14', 'jetty1.png,jetty2.png', 'jetty.png', 'jetty.png', '1', '2048', '0', '1', 'small');
INSERT INTO `template` VALUES ('20', 'sonarqube', 'services:\n sonarqube:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/sonarqube:6.5\n  ports:\n    - port: 9000\n      protocol: HTTP\n    - port: 9092\n      protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  environment:\n    AUTH: no\n    SONARQUBE_JDBC_USERNAME: sonar\n    SONARQUBE_JDBC_PASSWORD: sonarpwd\n    SONARQUBE_JDBC_URL: jdbc:mysql://${name}-mysql:3306/sonar?useUnicode=true&characterEncoding=utf8\n  volumeMounts:\n      - name: data\n        mountPath: /opt/sonarqube/data\n        volSize: 1024\n mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: adminpwd\n      MYSQL_USER: sonar\n      MYSQL_PASSWORD: sonarpwd\n      MYSQL_DATABASE: sonar', 'services:\n sonarqube:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/sonarqube:6.5\n  ports:\n    - port: 9000\n      protocol: HTTP\n    - port: 9092\n      protocol: TCP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  environment:\n    AUTH: no\n    SONARQUBE_JDBC_USERNAME: sonar\n    SONARQUBE_JDBC_PASSWORD: sonarpwd\n    SONARQUBE_JDBC_URL: jdbc:mysql://${name}-mysql:3306/sonar?useUnicode=true&characterEncoding=utf8\n  volumeMounts:\n      - name: data\n        mountPath: /opt/sonarqube/data\n        volSize: 1024\n mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 125m\n    environment:\n      MYSQL_ROOT_PASSWORD: adminpwd\n      MYSQL_USER: sonar\n      MYSQL_PASSWORD: sonarpwd\n      MYSQL_DATABASE: sonar', '2016-12-30 21:39:21', '2017-11-09 20:38:51', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp SonarQube is an open source platform for continuous inspection of code quality in charge of managing the quality of Java source code.Through plug-in mechanism, SonarQube can integrate different testing tools, code analysis tools, and continuous integration tools, such as pmd-cpd、checkstyle、findbugs、Jenkins. These results can be processed by different plug-ins, and the quality of code can be measured quantitatively, so that the code quality management can be easily carried out for different sizes and kinds of projects. At the same time, SonarQube also provides interface support for a large number of continuous integration tools, and it can easily  be used in continuous integration. In addition, SonarQube plug-ins can support other programming languages besides Java, and provide well support for internationalization and report documentation.<br><br>\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password:admin/admin', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp SonarQube是一个连续检测代码质量的开源平台，用于管理Java源代码的质量。通过插件机制，SonarQube可以集成不同的测试工具，代码分析工具，以及持续集成工具，比如pmd-cpd、checkstyle、findbugs、Jenkins。通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。同时 SonarQube还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 SonarQube。此外，SonarQube的插件还可以对Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。<br><br>\r\n配置信息：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/sonarqube:6.5,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6', 'appshop', 'security', '39', 'sonarqube1.png,sonarqube2.png', 'sonarqube.png', 'sonarqube.png', '2', '4096', '1024', '2', 'small');
INSERT INTO `template` VALUES ('47', 'nexus', 'services:\n nexus:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/nexus:2.14.2\n  ports:\n    - port: 8081\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 1\n  volumeMounts:\n      - name: data\n        mountPath: /sonatype-work\n        volSize: 1024', 'services:\n nexus:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/nexus:2.14.2\n  ports:\n    - port: 8081\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 2048Mi\n  cpu_shares: 150m\n  volumeMounts:\n      - name: data\n        mountPath: /sonatype-work\n        volSize: 1024', '2017-01-12 16:30:10', '2017-10-19 17:44:13', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Nexus is the Maven repository manager, when you use Maven, you can download the essential artifact from the Maven central repository. However, it is usually not a good practice, so that you should set up a Maven repository server in local hosts, and it maintains remote agent repository at the same time local repository, in order to save bandwidth and time. Nexus can satisfy the demand. In addition, it also provides a powerful repository management and artifact searching , which is based on REST. The friendly UI is a extjs REST client that occupies little memory, and it is based on the simple file system not the database. All these advantages make the Nexus a most popular Maven repository manager.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp CONTEXT_PATH &nbsp&nbsp&nbsp&nbsp	Use ‘-Dexexus-webapp-context-path’to deliver，and  is used to visit the URL of Nexus，Default Value is：\'/nexus\'<br>\r\n	&nbsp&nbsp&nbsp&nbsp MAX_HEAP &nbsp&nbsp&nbsp&nbsp Used as –Xmx to deliver, Default Value is: 768m<br>\r\n	&nbsp&nbsp&nbsp&nbsp MIN_HEAP &nbsp&nbsp&nbsp&nbsp Used as -Xms to deliver, Default Value is: 256m<br>\r\n	&nbsp&nbsp&nbsp&nbsp JAVA_OPTS &nbsp&nbsp&nbsp&nbsp This variable can be used to deliver other option to JVM，Default Value is：-server-XX:MaxPermSize=192m-Djava.net.preferIPv4Stack=true<br>\r\n	&nbsp&nbsp&nbsp&nbsp LAUNCHER_CONF &nbsp&nbsp&nbsp&nbsp Provides list Nexus boot starter of config file，Default Value is：./conf/jetty.xml./conf/jetty-requestlog.xml<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password is admin/admin123<br>\r\n<b>Remarks：<br>\r\nPlease add / nexus after the platform service address when visiting (default setting)</b>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Nexus是Maven仓库管理器，如果使用Maven，可以从Maven中央仓库下载所需要的构件（artifact），但这通常不是一个好的做法，应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，Nexus就可以满足这样的需要。此外，它还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的 REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp CONTEXT_PATH &nbsp&nbsp&nbsp&nbsp	作为-Dexexus-webapp-context-path传递，用来定义访问Nexus的URL，默认值：\'/nexus\'<br>\r\n	&nbsp&nbsp&nbsp&nbsp MAX_HEAP &nbsp&nbsp&nbsp&nbsp 作为-Xmx传递，默认值：768m<br>\r\n	&nbsp&nbsp&nbsp&nbsp MIN_HEAP &nbsp&nbsp&nbsp&nbsp 作为-Xms传递，默认值：256m<br>\r\n	&nbsp&nbsp&nbsp&nbsp JAVA_OPTS &nbsp&nbsp&nbsp&nbsp 可以通过此变量将其他选项传递给JVM，默认值： -server -XX:MaxPermSize=192m -Djava.net.preferIPv4Stack=true<br>\r\n	&nbsp&nbsp&nbsp&nbsp LAUNCHER_CONF &nbsp&nbsp&nbsp&nbsp 提供给的配置文件的列表 Nexus引导启动器， 默认值： ./conf/jetty.xml ./conf/jetty-requestlog.xml<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin123<br>\r\n<b>备注：<br>\r\n访问时请在平台服务地址后面追加 /nexus（默认设置）</b>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/nexus:2.14.2', 'appshop', 'basic', '19', 'nexus1.png,nexus2.png', 'nexus.png', 'nexus.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('87', 'orangehrm', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  orangehrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/orangehrm:4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  orangehrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/orangehrm:4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', '2017-03-14 09:25:11', '2017-10-19 17:43:45', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp OrangeHRM Open Source is a free HR management system that offers a wealth of modules to suit the needs of your business. This widely-used system is feature-rich, intuitive and provides an essential HR management platform along with free documentation and access to a broad community of users.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM user name. Default value: admin<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM application password. Default value: bitnami<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp OrangeHRM开源是一个免费的人力资源管理系统，它提供了一个丰富的模块以适应您业务的需求。这个使用广泛的系统不仅功能丰富、直观，而且除了提供基本的HR管理平台功能外还带有免费的说明文档和一个大的用户社区。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM 的应用用户名。默认值: admin<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM 的应用程序密码。默认值: bitnami<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/orangehrm:4', 'appshop', 'enterprise', '16', 'OrangrHRM1.png,OrangrHRM2.png', 'orangehrm.png', 'orangehrm.png', '2', '4096', '1024', '2', 'small');
INSERT INTO `template` VALUES ('114', 'rabbitmq', 'services:\n  rabbitmq:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\n    ports:\n      - port: 5672\n        protocol: TCP\n      - port: 25672\n        protocol: TCP\n      - port: 4369\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/rabbitmq\n        volSize: 1024', 'services:\n  rabbitmq:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/rabbitmq:3.6.6-management\n    ports:\n      - port: 5672\n        protocol: TCP\n      - port: 25672\n        protocol: TCP\n      - port: 4369\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/rabbitmq\n        volSize: 1024', '2017-03-14 09:34:41', '2017-11-25 14:35:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ is a popular open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP). The RabbitMQ server is written in the Erlang programming language and is applied to integrate messages between applications or different components of a program. Client libraries to interface with the broker are available for all major programming languages.RabbitMQ can be used to analog different scenarios, such as point to point message distribution, subscription or notification.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  Client communication port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 Internal communication port between servers<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang discovery port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web administration port<br>\r\n	&nbsp&nbsp&nbsp&nbsp If you would like to visit web, please enter command: rabbitmq-pluginsenablerabbitmq_management.Address: http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default user account and password: guest/guest, the role is administrator.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。RabbitMQ是由Erlang语言开发，对于主要的编程语言都有驱动或者客户端。RabbitMQ可用来模拟不同的场景，例如点对点的消息分发或者订阅/推送。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  客户端通信端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 服务器间内部通信口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang发现端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web管理端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 开启web访问，输入命令 rabbitmq-plugins enable rabbitmq_management 。http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认用户密码 guest/guest ，角色 administrator 。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management', 'appshop', 'midware', '30', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('124', 'mediawiki', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  mediawiki:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mediawiki:1-master\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_ROOT_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_USER: root', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  mediawiki:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mediawiki:1-master\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_ROOT_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_USER: root', '2017-03-22 15:01:20', '2017-12-12 19:32:33', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MediaWiki is a powerful and extensible open-source wiki software. It is written in the PHP programming language and processes or displays the contents into a database such as Mysql .<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki user name. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki application password. Default value: bitnami1<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp MediaWiki是一个极其强大的、可扩展的软件，可以用PHP在像Mysql这样的数据库中处理和显示数据的功能丰富的wiki工具。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用程序密码。默认值: bitnami1<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mediawiki:1-master', 'appshop', 'enterprise', '13', 'MediaWiki1.png,MediaWiki2.png', 'mediawiki.png', 'mediawiki.png', '2', '4096', '1024', '2', 'small');
INSERT INTO `template` VALUES ('127', 'suitecrm', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  suitecrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/suitecrm:7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /appstore/suitecrm\n        volSize: 1024\n      - name: data3\n        mountPath: /appstore/apache\n        volSize: 1024\n      - name: data4\n        mountPath: /appstore/php\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  suitecrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/suitecrm:7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /bitnami/suitecrm\n        volSize: 1024\n      - name: data3\n        mountPath: /bitnami/apache\n        volSize: 1024\n      - name: data4\n        mountPath: /bitnami/php\n        volSize: 1024', '2017-03-22 15:22:39', '2017-10-19 17:42:49', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp SuiteCRM is a completely open source, enterprise-grade Customer Relationship Management (CRM) application. SuiteCRM is a fork of the popular SugarCRM application.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM user name. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp SuiteCRM是完全开源的企业级客户关系管理（CRM）应用程序。SuiteCRM是流行的客户关系管理（CRM）系统SugarCRM的一个软件分支。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/suitecrm:7', 'appshop', 'enterprise', '11', 'suitecrm1.png,suitecrm2.png', 'suitecrm.png', 'suitecrm.png', '2', '4096', '4096', '2', 'small');
INSERT INTO `template` VALUES ('128', 'drupal', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  drupal:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/drupal:8.2.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  drupal:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/drupal:8.2.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', '2017-03-22 15:58:10', '2017-10-24 10:44:24', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal is a general open-source content-management system. It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal是市场上通用的开源内容管理系统。Drupal 具有高性能且对许多服务时可扩展，可以通过REST、 JSON、SOAP等其他格式集成，拥有多达1500种插件去扩展和定制应用程序的各种类型的站点。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/drupal:8.2.7', 'appshop', 'enterprise', '17', 'Drupal1.png,Drupal2.png', 'drupal.png', 'drupal.png', '2', '4096', '1024', '2', 'small');
INSERT INTO `template` VALUES ('131', 'odoo', 'services:\n  postgres:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2\n    ports:\n      - port: 5432\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      POSTGRES_USER: odoo\n      POSTGRES_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/postgresql/data\n        volSize: 1024\n  odoo:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0\n    ports:\n      - port: 8069\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      HOST: ${name}-postgres\n      PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/lib/odoo\n        volSize: 1024\n      - name: data3\n        mountPath: /mnt/extra-addons\n        volSize: 1024', 'services:\n  postgres:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2\n    ports:\n      - port: 5432\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      POSTGRES_USER: odoo\n      POSTGRES_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/postgresql/data\n        volSize: 1024\n  odoo:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0\n    ports:\n      - port: 8069\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      HOST: ${name}-postgres\n      PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/lib/odoo\n        volSize: 1024\n      - name: data3\n        mountPath: /mnt/extra-addons\n        volSize: 1024', '2017-03-22 15:59:26', '2017-12-21 14:52:00', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal is a general open-source content-management system. It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Odoo是一套基于开源的Web商业应用。Odoo可以作为独立的应用程序，也可以无缝地集成你安装的好几个应用，让你能给得到一个全功能的开源ERP。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Odoo  的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Odoo  的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0', 'appshop', 'enterprise', '18', 'odoo1.png,odoo2.png', 'odoo.png', 'odoo.png', '2', '4096', '3072', '2', 'small');
INSERT INTO `template` VALUES ('133', 'joomla', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  joomla:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/joomla:3.8.2-r0\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n        MARIADB_USER: root\n        MARIADB_PASSWORD: pwd123456\n        MARIADB_HOST: ${name}-mysql\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  joomla:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/joomla:3.8.2-r0\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n        MARIADB_USER: root\n        MARIADB_PASSWORD: pwd123456\n        MARIADB_HOST: ${name}-mysql\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', '2017-03-22 16:01:31', '2017-12-12 19:39:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Joomla is a open-source content management system (CMS) for publishing web content. It includes features such as page caching, RSS feeds, printable versions of pages, news flashes.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Joomla是一个可以发布网站内容的PHP内容管理系统（CMS）。它的功能包括，如页面缓存，RSS提要，可打印版本的页面，新闻快报、博客、搜索和对非英语语言的支持。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的用户的名字。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/joomla:3.8.2-r0', 'appshop', 'enterprise', '15', 'joomla1.png,joomla2.png', 'joomla.png', 'joomla.png', '2', '4096', '2048', '2', 'small');
INSERT INTO `template` VALUES ('139', 'magento', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_DATABASE: magento\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  magento:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/magento2:2.2.1\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_HOST: ${name}-mysql\n      MYSQL_ROOT_PASSWORD:  pwd123456\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n      MYSQL_DATABASE: magento\n      MAGENTO_LANGUAGE: en_GB\n      MAGENTO_DEFAULT_CURRENCY: CNY\n      MAGENTO_TIMEZONE: Asia/Shanghai\n      MAGENTO_URL: http://${namespace}-${name}-magento.caas.haihangyun.cn\n      MAGENTO_ADMIN_FIRSTNAME: Admin\n      MAGENTO_ADMIN_LASTNAME: MyStore\n      MAGENTO_ADMIN_EMAIL: admin@example.com\n      MAGENTO_ADMIN_USERNAME: admin\n      MAGENTO_ADMIN_PASSWORD: bitnami1234\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/htdocs\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_DATABASE: magento\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  magento:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/magento2:2.2.1\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_HOST: ${name}-mysql\n      MYSQL_ROOT_PASSWORD:  pwd123456\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n      MYSQL_DATABASE: magento\n      MAGENTO_LANGUAGE: en_GB\n      MAGENTO_DEFAULT_CURRENCY: CNY\n      MAGENTO_TIMEZONE: Asia/Shanghai\n      MAGENTO_URL: http://${namespace}-${name}-magento.caas.haihangyun.cn\n      MAGENTO_ADMIN_FIRSTNAME: Admin\n      MAGENTO_ADMIN_LASTNAME: MyStore\n      MAGENTO_ADMIN_EMAIL: admin@example.com\n      MAGENTO_ADMIN_USERNAME: admin\n      MAGENTO_ADMIN_PASSWORD: bitnami1234\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/htdocs\n        volSize: 1024', '2017-03-22 16:05:05', '2017-12-14 15:03:49', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Magento is a flexible ecommerce solution that has a huge variety features which include deal options, multi-store support, loyalty program, catalog management, shopper filtering and promotion rules, etc.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp Magento Database: Creating Mysql first, and filling in the information when the Magento is initializing.<br>\r\n	&nbsp&nbsp&nbsp&nbsp Admin account and password: Configure the information when Magento is initializing.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Magento是一个功能丰富、灵活的电子商务解决方案。它包括交易选项、多商店功能、忠诚方案、产品分类和购物者过滤、促销规则等等。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 启动完成后，打开magento的终端，执行&nbsp<b>install-magento</b>&nbsp命令进行初始化安装。<br>\r\n	&nbsp&nbsp&nbsp&nbsp 管理账号和密码：admin/bitnam1234。<br>\r\n    &nbsp&nbsp&nbsp&nbsp 在magento的访问地址后加&nbsp<i>/admin</i>&nbsp访问后台管理页面<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/magento2:2.2.1', 'appshop', 'enterprise', '20', 'Magento1.png,Magento2.png', 'magento.png', 'magento.png', '2', '4096', '2048', '2', 'small');
INSERT INTO `template` VALUES ('145', 'ghost', 'services:\n  ghost:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/ghost:1-master\n    ports:\n      - port: 2368\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/ghost/content\n        volSize: 1024\n    environment:\n       MARIADB_HOST:  ${name}-mysql\n       MARIADB_ROOT_PASSWORD: pwd123456\n       MYSQL_CLIENT_CREATE_DATABASE_NAME: ghost\n       MYSQL_CLIENT_CREATE_DATABASE_USER: root\n       MYSQL_CLIENT_CREATE_DATABASE_PASSWORD: pwd123456\n       GHOST_HOST:  ${namespace}-${name}-ghost.caas.haihangyun.cn\n       GHOST_DATABASE_PASSWORD: pwd123456\n       GHOST_DATABASE_USER: root\n       GHOST_PORT_NUMBER: 80\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456', 'services:\n  ghost:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/ghost:1-master\n    ports:\n      - port: 2368\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/ghost/content\n        volSize: 1024\n    environment:\n       MARIADB_HOST:  ${name}-mysql\n       MARIADB_ROOT_PASSWORD: pwd123456\n       MYSQL_CLIENT_CREATE_DATABASE_NAME: ghost\n       MYSQL_CLIENT_CREATE_DATABASE_USER: root\n       MYSQL_CLIENT_CREATE_DATABASE_PASSWORD: pwd123456\n       GHOST_HOST:  ${namespace}-${name}-ghost.caas.haihangyun.cn\n       GHOST_DATABASE_PASSWORD: pwd123456\n       GHOST_DATABASE_USER: root\n       GHOST_PORT_NUMBER: 80\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 150m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456', '2017-03-22 16:08:07', '2017-12-12 19:47:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Ghost is a simple, powerful content distribution platform that helps you share your story with the world.<br><br>\r\nConfiguration Information：<br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost user name. Default: user <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost application password. Defaults: bitnami123 <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost application email. Defaults: user@example.com <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost title. Defaults: User\'s Blog <br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Ghost是一个简单、功能强大的内容发布平台，它可以帮助你与世界分享你的故事。<br><br>\r\n配置信息：<br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的用户名。默认值: user <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的应用程序密码。默认值: bitnami123 <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的应用电子邮箱。默认值: user@example.com <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的标题。默认值：User\'s Blog <br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/ghost:1-master,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6', 'appshop', 'enterprise', '16', 'ghost1.png,ghost2.png', 'ghost.png', 'ghost.png', '2', '4096', '1024', '2', 'small');
INSERT INTO `template` VALUES ('253', 'wordpress', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: pwd123456\n      MYSQL_DATABASE: wordpress\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  wordpress:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      WORDPRESS_DB_HOST: ${name}-mysql\n      WORDPRESS_DB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: pwd123456\n      MYSQL_DATABASE: wordpress\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  wordpress:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      WORDPRESS_DB_HOST: ${name}-mysql\n      WORDPRESS_DB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', '2017-06-27 13:36:00', '2017-12-21 23:28:54', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp WordPress is one of the most popular open source blogging tool and a content management system (CMS). It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp WordPress是市场上最通用的开源内容管理系统之一。它功能强大，易于扩展，易于通过REST，JSON，SOAP以及多种格式集成，拥有多达1500种插件去扩展和定制应用程序的各种类型的站点。<br><br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7', 'appshop', 'enterprise', '17', 'wordpress.png,wordpress2.png', 'wordpress.png', 'wordpress.png', '4', '8192', '2048', '2', 'medium');
INSERT INTO `template` VALUES ('259', 'wordpress', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: pwd123456\n      MYSQL_DATABASE: wordpress\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  wordpress:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      WORDPRESS_DB_HOST: ${name}-mysql\n      WORDPRESS_DB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4024m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: pwd123456\n      MYSQL_DATABASE: wordpress\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  wordpress:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/wordpress:4.7.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4024m\n    environment:\n      WORDPRESS_DB_HOST: ${name}-mysql\n      WORDPRESS_DB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', '2017-06-27 15:42:04', '2017-11-09 13:14:25', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp WordPress is one of the most popular open source blogging tool and a content management system (CMS). It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp WordPress是市场上最通用的开源内容管理系统之一。它功能强大，易于扩展，易于通过REST，JSON，SOAP以及多种格式集成，拥有多达1500种插件去扩展和定制应用程序的各种类型的站点。<br><br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/wordpress:4.7.7', 'appshop', 'enterprise', '10', 'wordpress.png,wordpress2.png', 'wordpress.png', 'wordpress.png', '8', '16384', '2048', '2', 'large');
INSERT INTO `template` VALUES ('286', 'mongodb', 'services:\n mongo:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2\n  ports:\n    - port: 27017\n      protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  environment:\n    MONGODB_USER: hcpaas\n    MONGODB_PASSWORD: hcpaas123\n    MONGODB_DATABASE: hcpaasdb\n    MONGODB_ADMIN_PASSWORD: adminpwd123\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', 'services:\n mongo:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mongodb:3.2\n  ports:\n    - port: 27017\n      protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 212m\n  environment:\n    MONGODB_USER: hcpaas\n    MONGODB_PASSWORD: hcpaas123\n    MONGODB_DATABASE: hcpaasdb\n    MONGODB_ADMIN_PASSWORD: adminpwd123\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', '2017-06-27 15:49:49', '2017-09-08 14:59:06', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MongoDB is a cross-platform document-oriented database. Classified as a NoSQL database, MongoDB eschews the traditional table-based relational database structure. It stores data as a document, and the data structure consists of key-value pairs which contain other documents, arrays and document arrays, making the integration of data in certain types of applications easier and faster<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_ADMIN_PASSWORD &nbsp&nbsp&nbsp&nbsp Admin user password. Default Value：adminpwd123<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_DATABASE &nbsp&nbsp&nbsp&nbsp  Creating new database. If user/password is set up, the user will be allocated super use permissions of the database. Default creating: hcpaasdb<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_USER &nbsp&nbsp&nbsp&nbsp Creating new user. Default Value：hcpaas<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of new user. Default Value: hcpaas123<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp MongoDB是一个跨平台的面向文档的数据库。MongoDB被归类为NoSQL数据库，避开了传统的基于表的关系型数据库结构。它将数据存储为一个文档，数据结构由键值(key=>value)对组成，字段值可以包含其他文档、数组及文档数组，从而使数据在某些类型的应用程序中的集成更加容易快捷。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_ADMIN_PASSWORD &nbsp&nbsp&nbsp&nbsp 管理员用户密码。默认值：adminpwd123<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_DATABASE &nbsp&nbsp&nbsp&nbsp  新建数据库。如果user/password被设置，将赋予该user对该数据库的超级使用权限。默认创建：hcpaasdb<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_USER &nbsp&nbsp&nbsp&nbsp 新建用户。默认值：hcpaas<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_PASSWORD &nbsp&nbsp&nbsp&nbsp 新建用户的密码。默认值：hcpaas123<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2', 'appshop', 'midware', '2', 'mongoDB1.png,mongoDB2.png', 'mongodb.png', 'mongodb.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('304', 'jetty', 'services:\n jetty:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jetty:9.4\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  environment:\n    AUTH: no', 'services:\n jetty:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/jetty:9.4\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 212m\n  environment:\n    AUTH: no', '2017-06-27 15:54:02', '2017-10-18 14:27:04', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jetty is a Java-based HTTP (Web) server and Java Servlet container. Jetty is developed as a free commercial application and open source project as part of the Eclipse Foundation. The web server is used in piles of successful products such as ApacheGeromino，JBoss，IBMTivoli and CiscoSESM. Jetty supports the latest Java Servlet API (with JSP support) as well as protocols SPDY and WebSocket.  While Jetty is usually associated with serving documents to people, it is basically used for Web Server which is easily embedded into Java applications.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_HOME &nbsp&nbsp&nbsp&nbsp Installation directory of jetty. Default Value: /usr/local/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_BASE &nbsp&nbsp&nbsp&nbsp Fundamental path of Jetty instance, and this path saves the configuration and deployment path of jetty instance. Deploying path of the Web application is: $JETTY_BASE/webapps. Default Value: /var/lib/jetty/webapps/</b><br>\r\n	&nbsp&nbsp&nbsp&nbsp TMPDIR &nbsp&nbsp&nbsp&nbsp Temporary file of Jetty. Default Value: /tmp/jetty<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jetty是一个由Java实现、开源、基于标准的HTTP（Web）服务器和Java Servlet容器。它是Eclipse基金会的项目之一，可以免费地用于商业行为。现在已经有非常多的成功产品基于Jetty，比如 Apache Geromino，JBoss，IBM Tivoli，Cisco SESM 等。Jetty支持最新的Java Servlet API（支持JSP）以及协议SPDY和WebSocket，可以用来作为一个传统的Web服务器，也可以作为一个动态的内容服务器，并且Jetty可以非常容易的嵌入到Java应用程序当中。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_HOME &nbsp&nbsp&nbsp&nbsp Jetty的安装目录。默认值：/usr/local/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_BASE &nbsp&nbsp&nbsp&nbsp Jetty实例的基础路径，该路径保存了Jetty实例的配置以及部署目录等，Web应用的部署目录为$JETTY_BASE/webapps。默认值：/var/lib/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp TMPDIR &nbsp&nbsp&nbsp&nbsp Jetty的临时文件夹。默认值：/tmp/jetty<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jetty:9.4', 'appshop', 'midware', '1', 'jetty1.png,jetty2.png', 'jetty.png', 'jetty.png', '2', '4096', '0', '1', 'medium');
INSERT INTO `template` VALUES ('307', 'jetty', 'services:\n jetty:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jetty:9.4\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  environment:\n    AUTH: no', 'services:\n jetty:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/jetty:9.4\n  ports:\n    - port: 8080\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4024m\n  environment:\n    AUTH: no', '2017-06-27 15:54:23', '2017-10-18 14:26:47', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jetty is a Java-based HTTP (Web) server and Java Servlet container. Jetty is developed as a free commercial application and open source project as part of the Eclipse Foundation. The web server is used in piles of successful products such as ApacheGeromino，JBoss，IBMTivoli and CiscoSESM. Jetty supports the latest Java Servlet API (with JSP support) as well as protocols SPDY and WebSocket.  While Jetty is usually associated with serving documents to people, it is basically used for Web Server which is easily embedded into Java applications.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_HOME &nbsp&nbsp&nbsp&nbsp Installation directory of jetty. Default Value: /usr/local/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_BASE &nbsp&nbsp&nbsp&nbsp Fundamental path of Jetty instance, and this path saves the configuration and deployment path of jetty instance. Deploying path of the Web application is: $JETTY_BASE/webapps. Default Value: /var/lib/jetty/webapps/</b><br>\r\n	&nbsp&nbsp&nbsp&nbsp TMPDIR &nbsp&nbsp&nbsp&nbsp Temporary file of Jetty. Default Value: /tmp/jetty<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Jetty是一个由Java实现、开源、基于标准的HTTP（Web）服务器和Java Servlet容器。它是Eclipse基金会的项目之一，可以免费地用于商业行为。现在已经有非常多的成功产品基于Jetty，比如 Apache Geromino，JBoss，IBM Tivoli，Cisco SESM 等。Jetty支持最新的Java Servlet API（支持JSP）以及协议SPDY和WebSocket，可以用来作为一个传统的Web服务器，也可以作为一个动态的内容服务器，并且Jetty可以非常容易的嵌入到Java应用程序当中。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_HOME &nbsp&nbsp&nbsp&nbsp Jetty的安装目录。默认值：/usr/local/jetty<br>\r\n	&nbsp&nbsp&nbsp&nbsp JETTY_BASE &nbsp&nbsp&nbsp&nbsp Jetty实例的基础路径，该路径保存了Jetty实例的配置以及部署目录等，<b>Web应用的部署目录为$JETTY_BASE/webapps。默认值：/var/lib/jetty</b><br>\r\n	&nbsp&nbsp&nbsp&nbsp TMPDIR &nbsp&nbsp&nbsp&nbsp Jetty的临时文件夹。默认值：/tmp/jetty<br>\r\n', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/jetty:9.4', 'appshop', 'midware', '1', 'jetty1.png,jetty2.png', 'jetty.png', 'jetty.png', '4', '8192', '0', '1', 'large');
INSERT INTO `template` VALUES ('460', 'RabbitMQ集群-beta', 'services:\n  etcd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/etcd:caas\n    ports:\n      - port: 4001\n        protocol: TCP\n      - port: 7001\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n  rqcluster:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq-autocluster:caas-1.2\n    ports:\n      - port: 4369\n        protocol: TCP\n      - port: 5671\n        protocol: TCP\n      - port: 5672\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n      - port: 25672\n        protocol: TCP\n    replicas: 3\n    mem_limit: 2048Mi\n    cpu_shares: 1    \n    environment:\n      AUTOCLUSTER_TYPE: etcd\n      ETCD_HOST: ${name}-etcd\n      CLEANUP_WARN_ONLY: false\n      valueFrom_MY_POD_IP: status.podIP\n      RABBITMQ_NODENAME: rabbit@$(MY_POD_IP)\n      AUTOCLUSTER_CLEANUP: true\n      RABBITMQ_USE_LONGNAME: true\n      ETCD_PORT: 4001\n      AUTOCLUSTER_DELAY: 300', 'services:\n  etcd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/etcd:caas\n    ports:\n      - port: 4001\n        protocol: TCP\n      - port: 7001\n        protocol: TCP\n    replicas: 1\n    mem_limit: 2048Mi\n    cpu_shares: 1\n  rqcluster:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/rabbitmq-autocluster:caas-1.2\n    ports:\n      - port: 4369\n        protocol: TCP\n      - port: 5671\n        protocol: TCP\n      - port: 5672\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n      - port: 25672\n        protocol: TCP\n    replicas: 3\n    mem_limit: 2048Mi\n    cpu_shares: 1    \n    environment:\n      AUTOCLUSTER_TYPE: etcd\n      ETCD_HOST: ${name}-etcd\n      CLEANUP_WARN_ONLY: false\n      valueFrom_MY_POD_IP: status.podIP\n      RABBITMQ_NODENAME: rabbit@$(MY_POD_IP)\n      AUTOCLUSTER_CLEANUP: true\n      RABBITMQ_USE_LONGNAME: true\n      ETCD_PORT: 4001\n      AUTOCLUSTER_DELAY: 300', '2017-09-30 10:30:38', '2017-12-14 09:20:14', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ is a popular open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP). It is applied to integrate messages between applications or different components of a program. The RabbitMQ cluster is deployed with the clustering pattern to realize the function that part of the nodes failure does not affect the operation between the consumer and the producer. In addition, this pattern can extend the message communication throughput by adding more nodes.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  Client communication port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 nternal communication port between servers<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang discovery port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web administration port<br>\r\n	&nbsp&nbsp&nbsp&nbsp If you would like to visit web, please enter command: rabbitmq-pluginsenablerabbitmq_management.Address: http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default user account and password: guest/guest, the role is administrator.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。此RabbitMQ集群以cluster的方式来部署，达到两个目的：1.&nbsp部分RabbitMQ节点故障不影响消费者和生产者运行；2.&nbsp可以通过加更多的节点来扩展消息通信的吞吐量。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  客户端通信端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 服务器间内部通信口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang发现端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web管理端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 开启web访问，输入命令 rabbitmq-plugins enable rabbitmq_management 。http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认用户密码 guest/guest ，角色 administrator 。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/etcd:caas,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq-autocluster:caas-1.2', 'appshop', 'midware', '46', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '4', '8192', '0', '4', 'small');
INSERT INTO `template` VALUES ('494', 'RabbitMQ持久化-beta1', 'services:\r\n  rabbitmq:\r\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\r\n    ports:\r\n      - port: 5672\r\n        protocol: TCP\r\n      - port: 25672\r\n        protocol: TCP\r\n      - port: 4369\r\n        protocol: TCP\r\n      - port: 15672\r\n        protocol: HTTP\r\n    replicas: 1\r\n    mem_limit: 2048Mi\r\n    cpu_shares: 1\r\n    volumeMounts:\r\n      - name: data\r\n        mountPath: /var/lib/rabbitmq\r\n        volSize: 1024\r\n    environment:\r\n      HOSTNAME: localhost', 'services:\r\n  rabbitmq:\r\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\r\n    ports:\r\n      - port: 5672\r\n        protocol: TCP\r\n      - port: 25672\r\n        protocol: TCP\r\n      - port: 4369\r\n        protocol: TCP\r\n      - port: 15672\r\n        protocol: HTTP\r\n    replicas: 1\r\n    mem_limit: 2048Mi\r\n    cpu_shares: 1\r\n    volumeMounts:\r\n      - name: data\r\n        mountPath: /var/lib/rabbitmq\r\n        volSize: 1024\r\n    environment:\r\n      HOSTNAME: localhost', '2017-11-30 15:17:00', '2018-08-16 04:59:04', '682', 'Introduction：<br><br>&nbsp&nbsp&nbsp&nbsp&nbspRabbitMQ&nbspis&nbspa&nbsppopular&nbspopen&nbspsource&nbspmessage&nbspbroker&nbspsoftware&nbsp(sometimes&nbspcalled&nbspmessage-oriented&nbspmiddleware)&nbspthat&nbspimplements&nbspthe&nbspAdvanced&nbspMessage&nbspQueuing&nbspProtocol&nbsp(AMQP).&nbspThe&nbspRabbitMQ&nbspserver&nbspis&nbspwritten&nbspin&nbspthe&nbspErlang&nbspprogramming&nbsplanguage&nbspand&nbspis&nbspapplied&nbspto&nbspintegrate&nbspmessages&nbspbetween&nbspapplications&nbspor&nbspdifferent&nbspcomponents&nbspof&nbspa&nbspprogram.&nbspClient&nbsplibraries&nbspto&nbspinterface&nbspwith&nbspthe&nbspbroker&nbspare&nbspavailable&nbspfor&nbspall&nbspmajor&nbspprogramming&nbsplanguages.RabbitMQ&nbspcan&nbspbe&nbspused&nbspto&nbspanalog&nbspdifferent&nbspscenarios,&nbspsuch&nbspas&nbsppoint&nbspto&nbsppoint&nbspmessage&nbspdistribution,&nbspsubscription&nbspor&nbspnotification.<br><br><br>Configuration&nbspInformation：<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp5672&nbsp&nbspClient&nbspcommunication&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp25672&nbspInternal&nbspcommunication&nbspport&nbspbetween&nbspservers<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4369&nbsp&nbspErlang&nbspdiscovery&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp15672&nbspWeb&nbspadministration&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspIf&nbspyou&nbspwould&nbsplike&nbspto&nbspvisit&nbspweb,&nbspplease&nbspenter&nbspcommand:&nbsprabbitmq-pluginsenablerabbitmq_management.Address:&nbsphttp://your_ip_address:15672/<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspDefault&nbspuser&nbspaccount&nbspand&nbsppassword:&nbspguest/guest,&nbspthe&nbsprole&nbspis&nbspadministrator.<br><br><b>Messages&nbsppersistent&nbspprovided</b><br>', '简介：<br><br>&nbsp&nbsp&nbsp&nbsp&nbspRabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。RabbitMQ是由Erlang语言开发，对于主要的编程语言都有驱动或者客户端。RabbitMQ可用来模拟不同的场景，例如点对点的消息分发或者订阅/推送。<br><br><br>配置信息：<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp5672&nbsp&nbsp客户端通信端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp25672&nbsp服务器间内部通信口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4369&nbsp&nbspErlang发现端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp15672&nbspWeb管理端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp开启web访问，输入命令&nbsprabbitmq-plugins&nbspenable&nbsprabbitmq_management&nbsp。http://your_ip_address:15672/<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp默认用户密码&nbspguest/guest&nbsp，角色&nbspadministrator&nbsp。<br><br><b>此版本提供消息持久化</b>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management', 'appshop', 'midware', '11', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '1', '2048', '1024', '1', 'small');
INSERT INTO `template` VALUES ('553', 'drupal', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  drupal:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/drupal:8.2.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  drupal:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/drupal:8.2.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', '2017-03-22 15:58:10', '2017-10-24 10:44:24', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal is a general open-source content-management system. It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal是市场上通用的开源内容管理系统。Drupal 具有高性能且对许多服务时可扩展，可以通过REST、 JSON、SOAP等其他格式集成，拥有多达1500种插件去扩展和定制应用程序的各种类型的站点。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/drupal:8.2.7', 'appshop', 'enterprise', '15', 'Drupal1.png,Drupal2.png', 'drupal.png', 'drupal.png', '4', '8192', '1024', '2', 'medium');
INSERT INTO `template` VALUES ('554', 'drupal', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  drupal:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/drupal:8.2.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  drupal:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/drupal:8.2.7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', '2017-03-22 15:58:10', '2017-10-24 10:44:24', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal is a general open-source content-management system. It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal是市场上通用的开源内容管理系统。Drupal 具有高性能且对许多服务时可扩展，可以通过REST、 JSON、SOAP等其他格式集成，拥有多达1500种插件去扩展和定制应用程序的各种类型的站点。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/drupal:8.2.7', 'appshop', 'enterprise', '15', 'Drupal1.png,Drupal2.png', 'drupal.png', 'drupal.png', '8', '16384', '1024', '2', 'large');
INSERT INTO `template` VALUES ('555', 'ghost', 'services:\n  ghost:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/ghost:1-master\n    ports:\n      - port: 2368\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/ghost/content\n        volSize: 1024\n    environment:\n       MARIADB_HOST:  ${name}-mysql\n       MARIADB_ROOT_PASSWORD: pwd123456\n       MYSQL_CLIENT_CREATE_DATABASE_NAME: ghost\n       MYSQL_CLIENT_CREATE_DATABASE_USER: root\n       MYSQL_CLIENT_CREATE_DATABASE_PASSWORD: pwd123456\n       GHOST_HOST:  ${namespace}-${name}-ghost.caas.haihangyun.cn\n       GHOST_DATABASE_PASSWORD: pwd123456\n       GHOST_DATABASE_USER: root\n       GHOST_PORT_NUMBER: 80\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456', 'services:\n  ghost:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/ghost:1-master\n    ports:\n      - port: 2368\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/ghost/content\n        volSize: 1024\n    environment:\n       MARIADB_HOST:  ${name}-mysql\n       MARIADB_ROOT_PASSWORD: pwd123456\n       MYSQL_CLIENT_CREATE_DATABASE_NAME: ghost\n       MYSQL_CLIENT_CREATE_DATABASE_USER: root\n       MYSQL_CLIENT_CREATE_DATABASE_PASSWORD: pwd123456\n       GHOST_HOST:  ${namespace}-${name}-ghost.caas.haihangyun.cn\n       GHOST_DATABASE_PASSWORD: pwd123456\n       GHOST_DATABASE_USER: root\n       GHOST_PORT_NUMBER: 80\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456', '2017-03-22 16:08:07', '2017-12-12 19:47:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Ghost is a simple, powerful content distribution platform that helps you share your story with the world.<br><br>\r\nConfiguration Information：<br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost user name. Default: user <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost application password. Defaults: bitnami123 <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost application email. Defaults: user@example.com <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost title. Defaults: User\'s Blog <br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Ghost是一个简单、功能强大的内容发布平台，它可以帮助你与世界分享你的故事。<br><br>\r\n配置信息：<br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的用户名。默认值: user <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的应用程序密码。默认值: bitnami123 <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的应用电子邮箱。默认值: user@example.com <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的标题。默认值：User\'s Blog <br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/ghost:1-master,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'enterprise', '13', 'ghost1.png,ghost2.png', 'ghost.png', 'ghost.png', '4', '8192', '1024', '2', 'medium');
INSERT INTO `template` VALUES ('556', 'ghost', 'services:\n  ghost:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/ghost:1-master\n    ports:\n      - port: 2368\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/ghost/content\n        volSize: 1024\n    environment:\n       MARIADB_HOST:  ${name}-mysql\n       MARIADB_ROOT_PASSWORD: pwd123456\n       MYSQL_CLIENT_CREATE_DATABASE_NAME: ghost\n       MYSQL_CLIENT_CREATE_DATABASE_USER: root\n       MYSQL_CLIENT_CREATE_DATABASE_PASSWORD: pwd123456\n       GHOST_HOST:  ${namespace}-${name}-ghost.caas.haihangyun.cn\n       GHOST_DATABASE_PASSWORD: pwd123456\n       GHOST_DATABASE_USER: root\n       GHOST_PORT_NUMBER: 80\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456', 'services:\n  ghost:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/ghost:1-master\n    ports:\n      - port: 2368\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/ghost/content\n        volSize: 1024\n    environment:\n       MARIADB_HOST:  ${name}-mysql\n       MARIADB_ROOT_PASSWORD: pwd123456\n       MYSQL_CLIENT_CREATE_DATABASE_NAME: ghost\n       MYSQL_CLIENT_CREATE_DATABASE_USER: root\n       MYSQL_CLIENT_CREATE_DATABASE_PASSWORD: pwd123456\n       GHOST_HOST:  ${namespace}-${name}-ghost.caas.haihangyun.cn\n       GHOST_DATABASE_PASSWORD: pwd123456\n       GHOST_DATABASE_USER: root\n       GHOST_PORT_NUMBER: 80\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456', '2017-03-22 16:08:07', '2017-12-12 19:47:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Ghost is a simple, powerful content distribution platform that helps you share your story with the world.<br><br>\r\nConfiguration Information：<br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost user name. Default: user <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost application password. Defaults: bitnami123 <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost application email. Defaults: user@example.com <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost title. Defaults: User\'s Blog <br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Ghost是一个简单、功能强大的内容发布平台，它可以帮助你与世界分享你的故事。<br><br>\r\n配置信息：<br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的用户名。默认值: user <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的应用程序密码。默认值: bitnami123 <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的应用电子邮箱。默认值: user@example.com <br>\r\n    &nbsp&nbsp&nbsp&nbsp Ghost的标题。默认值：User\'s Blog <br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/ghost:1-master,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'enterprise', '13', 'ghost1.png,ghost2.png', 'ghost.png', 'ghost.png', '8', '16384', '1024', '2', 'large');
INSERT INTO `template` VALUES ('557', 'gitlab', 'services:\n gitlab:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/gitlab-ce:9.5.4-caas\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  environment:\n    AUTH: no\n  volumeMounts:\n      - name: data1\n        mountPath: /var/opt/gitlab\n        volSize: 1024\n      - name: data2\n        mountPath: /var/log/gitlab\n        volSize: 1024', 'services:\n gitlab:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/gitlab-ce:9.5.4-caas\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2000m\n  environment:\n    AUTH: no\n  volumeMounts:\n      - name: data1\n        mountPath: /var/opt/gitlab\n        volSize: 1024\n      - name: data2\n        mountPath: /var/log/gitlab\n        volSize: 1024', '2017-01-31 20:13:27', '2017-10-18 17:03:33', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp GitLab is the only platform that brings the 100% software development lifecycle into a single interface, helping you eliminate unnecessary steps from the workflow and focus on building and delivering excellent software.\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default sign-in account: root<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default sign-in password: Setting it when you first login', '简介：<br>\n&nbsp&nbsp&nbsp&nbsp GitLab是将100％的软件开发生命周期带入单一界面的唯一平台，帮助您从工作流程中消除不必要的步骤，专注于构建和运送出色的软件。<br>\n配置信息： <br>\n&nbsp&nbsp&nbsp&nbsp 默认登录账号: root <br>\n&nbsp&nbsp&nbsp&nbsp 默认登录密码: 首次登录设置', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/gitlab-ce:9.5.4-caas', 'appshop', 'security', '34', 'gitlab1.png,gitlab2.png', 'gitlab.png', 'gitlab.png', '2', '4096', '2048', '1', 'medium');
INSERT INTO `template` VALUES ('558', 'gitlab', 'services:\n gitlab:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/gitlab-ce:9.5.4-caas\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  environment:\n    AUTH: no\n  volumeMounts:\n      - name: data1\n        mountPath: /var/opt/gitlab\n        volSize: 1024\n      - name: data2\n        mountPath: /var/log/gitlab\n        volSize: 1024', 'services:\n gitlab:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/gitlab-ce:9.5.4-caas\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4000m\n  environment:\n    AUTH: no\n  volumeMounts:\n      - name: data1\n        mountPath: /var/opt/gitlab\n        volSize: 1024\n      - name: data2\n        mountPath: /var/log/gitlab\n        volSize: 1024', '2017-01-31 20:13:27', '2017-10-18 17:03:33', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp GitLab is the only platform that brings the 100% software development lifecycle into a single interface, helping you eliminate unnecessary steps from the workflow and focus on building and delivering excellent software.\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default sign-in account: root<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default sign-in password: Setting it when you first login', '简介：<br>\n&nbsp&nbsp&nbsp&nbsp GitLab是将100％的软件开发生命周期带入单一界面的唯一平台，帮助您从工作流程中消除不必要的步骤，专注于构建和运送出色的软件。<br>\n配置信息： <br>\n&nbsp&nbsp&nbsp&nbsp 默认登录账号: root <br>\n&nbsp&nbsp&nbsp&nbsp 默认登录密码: 首次登录设置', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/gitlab-ce:9.5.4-caas', 'appshop', 'security', '36', 'gitlab1.png,gitlab2.png', 'gitlab.png', 'gitlab.png', '4', '8192', '2048', '1', 'large');
INSERT INTO `template` VALUES ('559', 'httpd', 'services:\n  httpd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/httpd:2.4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    volumeMounts:\n      - name: httpddata\n        mountPath: /usr/local/apache2/htdocs\n        volSize: 1024', 'services:\n  httpd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/httpd:2.4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    volumeMounts:\n      - name: httpddata\n        mountPath: /usr/local/apache2/htdocs\n        volSize: 1024', '2016-12-30 21:26:18', '2017-10-18 18:55:02', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Httpd is the main program of the Apache Hypertext Transfer Protocol (HTTP) server. It is designed to be an independent daemon that creates a pool of threads or subprocess that processes requests.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp HTTPD_PREFIX &nbsp&nbsp&nbsp&nbsp Installation Directory: /usr/local/apache2。Config File: /usr/local/apache2/conf/httpd.conf<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default File Path: /usr/local/apache2/htdocs/<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Httpd是Apache超文本传输协议(HTTP)服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp HTTPD_PREFIX &nbsp&nbsp&nbsp&nbsp 安装目录：/usr/local/apache2。配置文件 /usr/local/apache2/conf/httpd.conf<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认文件目录 /usr/local/apache2/htdocs/<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/httpd:2.4', 'appshop', 'midware', '13', 'httpd1.png,httpd2.png', 'httpd.png', 'httpd.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('560', 'httpd', 'services:\n  httpd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/httpd:2.4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    volumeMounts:\n      - name: httpddata\n        mountPath: /usr/local/apache2/htdocs\n        volSize: 1024', 'services:\n  httpd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/httpd:2.4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    volumeMounts:\n      - name: httpddata\n        mountPath: /usr/local/apache2/htdocs\n        volSize: 1024', '2016-12-30 21:26:18', '2017-10-18 18:55:02', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Httpd is the main program of the Apache Hypertext Transfer Protocol (HTTP) server. It is designed to be an independent daemon that creates a pool of threads or subprocess that processes requests.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp HTTPD_PREFIX &nbsp&nbsp&nbsp&nbsp Installation Directory: /usr/local/apache2。Config File: /usr/local/apache2/conf/httpd.conf<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default File Path: /usr/local/apache2/htdocs/<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Httpd是Apache超文本传输协议(HTTP)服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp HTTPD_PREFIX &nbsp&nbsp&nbsp&nbsp 安装目录：/usr/local/apache2。配置文件 /usr/local/apache2/conf/httpd.conf<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认文件目录 /usr/local/apache2/htdocs/<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/httpd:2.4', 'appshop', 'midware', '13', 'httpd1.png,httpd2.png', 'httpd.png', 'httpd.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('563', 'joomla', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 4096\n  joomla:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/joomla:3.8.2-r0\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n        MARIADB_USER: root\n        MARIADB_PASSWORD: pwd123456\n        MARIADB_HOST: ${name}-mysql\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  joomla:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/joomla:3.8.2-r0\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n        MARIADB_USER: root\n        MARIADB_PASSWORD: pwd123456\n        MARIADB_HOST: ${name}-mysql\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', '2017-03-22 16:01:31', '2017-12-12 19:39:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Joomla is a open-source content management system (CMS) for publishing web content. It includes features such as page caching, RSS feeds, printable versions of pages, news flashes.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Joomla是一个可以发布网站内容的PHP内容管理系统（CMS）。它的功能包括，如页面缓存，RSS提要，可打印版本的页面，新闻快报、博客、搜索和对非英语语言的支持。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的用户的名字。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/joomla:3.8.2-r0', 'appshop', 'enterprise', '16', 'joomla1.png,joomla2.png', 'joomla.png', 'joomla.png', '4', '8192', '5120', '2', 'medium');
INSERT INTO `template` VALUES ('564', 'joomla', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  joomla:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/joomla:3.8.2-r0\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n        MARIADB_USER: root\n        MARIADB_PASSWORD: pwd123456\n        MARIADB_HOST: ${name}-mysql\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  joomla:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/joomla:3.8.2-r0\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n        MARIADB_USER: root\n        MARIADB_PASSWORD: pwd123456\n        MARIADB_HOST: ${name}-mysql\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/html\n        volSize: 1024', '2017-03-22 16:01:31', '2017-12-12 19:39:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Joomla is a open-source content management system (CMS) for publishing web content. It includes features such as page caching, RSS feeds, printable versions of pages, news flashes.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Joomla是一个可以发布网站内容的PHP内容管理系统（CMS）。它的功能包括，如页面缓存，RSS提要，可打印版本的页面，新闻快报、博客、搜索和对非英语语言的支持。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的用户的名字。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Joomla  的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/joomla:3.8.2-r0', 'appshop', 'enterprise', '13', 'joomla1.png,joomla2.png', 'joomla.png', 'joomla.png', '8', '16384', '2048', '2', 'large');
INSERT INTO `template` VALUES ('565', 'magento', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_DATABASE: magento\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  magento:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/magento2:2.2.1\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_HOST: ${name}-mysql\n      MYSQL_ROOT_PASSWORD:  pwd123456\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n      MYSQL_DATABASE: magento\n      MAGENTO_LANGUAGE: en_GB\n      MAGENTO_DEFAULT_CURRENCY: CNY\n      MAGENTO_TIMEZONE: Asia/Shanghai\n      MAGENTO_URL: http://${namespace}-${name}-magento.caas.haihangyun.cn\n      MAGENTO_ADMIN_FIRSTNAME: Admin\n      MAGENTO_ADMIN_LASTNAME: MyStore\n      MAGENTO_ADMIN_EMAIL: admin@example.com\n      MAGENTO_ADMIN_USERNAME: admin\n      MAGENTO_ADMIN_PASSWORD: bitnami1234\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/htdocs\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_DATABASE: magento\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  magento:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/magento2:2.2.1\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_HOST: ${name}-mysql\n      MYSQL_ROOT_PASSWORD:  pwd123456\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n      MYSQL_DATABASE: magento\n      MAGENTO_LANGUAGE: en_GB\n      MAGENTO_DEFAULT_CURRENCY: CNY\n      MAGENTO_TIMEZONE: Asia/Shanghai\n      MAGENTO_URL: http://${namespace}-${name}-magento.caas.haihangyun.cn\n      MAGENTO_ADMIN_FIRSTNAME: Admin\n      MAGENTO_ADMIN_LASTNAME: MyStore\n      MAGENTO_ADMIN_EMAIL: admin@example.com\n      MAGENTO_ADMIN_USERNAME: admin\n      MAGENTO_ADMIN_PASSWORD: bitnami1234\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/htdocs\n        volSize: 1024', '2017-03-22 16:05:05', '2017-12-14 15:03:49', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Magento is a flexible ecommerce solution that has a huge variety features which include deal options, multi-store support, loyalty program, catalog management, shopper filtering and promotion rules, etc.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp Magento Database: Creating Mysql first, and filling in the information when the Magento is initializing.<br>\r\n	&nbsp&nbsp&nbsp&nbsp Admin account and password: Configure the information when Magento is initializing.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Magento是一个功能丰富、灵活的电子商务解决方案。它包括交易选项、多商店功能、忠诚方案、产品分类和购物者过滤、促销规则等等。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 启动完成后，打开magento的终端，执行&nbsp<b>install-magento</b>&nbsp命令进行初始化安装。<br>\r\n	&nbsp&nbsp&nbsp&nbsp 管理账号和密码：admin/bitnam1234。<br>\r\n    &nbsp&nbsp&nbsp&nbsp 在magento的访问地址后加&nbsp<i>/admin</i>&nbsp访问后台管理页面<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/magento2:2.2.1', 'appshop', 'enterprise', '16', 'Magento1.png,Magento2.png', 'magento.png', 'magento.png', '4', '8192', '2048', '2', 'medium');
INSERT INTO `template` VALUES ('566', 'magento', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_DATABASE: magento\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  magento:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/magento2:2.2.1\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_HOST: ${name}-mysql\n      MYSQL_ROOT_PASSWORD:  pwd123456\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n      MYSQL_DATABASE: magento\n      MAGENTO_LANGUAGE: en_GB\n      MAGENTO_DEFAULT_CURRENCY: CNY\n      MAGENTO_TIMEZONE: Asia/Shanghai\n      MAGENTO_URL: http://${namespace}-${name}-magento.caas.haihangyun.cn\n      MAGENTO_ADMIN_FIRSTNAME: Admin\n      MAGENTO_ADMIN_LASTNAME: MyStore\n      MAGENTO_ADMIN_EMAIL: admin@example.com\n      MAGENTO_ADMIN_USERNAME: admin\n      MAGENTO_ADMIN_PASSWORD: bitnami1234\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/htdocs\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n      MYSQL_DATABASE: magento\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  magento:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/magento2:2.2.1\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_HOST: ${name}-mysql\n      MYSQL_ROOT_PASSWORD:  pwd123456\n      MYSQL_USER: magento\n      MYSQL_PASSWORD: magento\n      MYSQL_DATABASE: magento\n      MAGENTO_LANGUAGE: en_GB\n      MAGENTO_DEFAULT_CURRENCY: CNY\n      MAGENTO_TIMEZONE: Asia/Shanghai\n      MAGENTO_URL: http://${namespace}-${name}-magento.caas.haihangyun.cn\n      MAGENTO_ADMIN_FIRSTNAME: Admin\n      MAGENTO_ADMIN_LASTNAME: MyStore\n      MAGENTO_ADMIN_EMAIL: admin@example.com\n      MAGENTO_ADMIN_USERNAME: admin\n      MAGENTO_ADMIN_PASSWORD: bitnami1234\n    volumeMounts:\n      - name: data2\n        mountPath: /var/www/htdocs\n        volSize: 1024', '2017-03-22 16:05:05', '2017-12-14 15:03:49', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Magento is a flexible ecommerce solution that has a huge variety features which include deal options, multi-store support, loyalty program, catalog management, shopper filtering and promotion rules, etc.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp Magento Database: Creating Mysql first, and filling in the information when the Magento is initializing.<br>\r\n	&nbsp&nbsp&nbsp&nbsp Admin account and password: Configure the information when Magento is initializing.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Magento是一个功能丰富、灵活的电子商务解决方案。它包括交易选项、多商店功能、忠诚方案、产品分类和购物者过滤、促销规则等等。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 启动完成后，打开magento的终端，执行&nbsp<b>install-magento</b>&nbsp命令进行初始化安装。<br>\r\n	&nbsp&nbsp&nbsp&nbsp 管理账号和密码：admin/bitnam1234。<br>\r\n    &nbsp&nbsp&nbsp&nbsp 在magento的访问地址后加&nbsp<i>/admin</i>&nbsp访问后台管理页面<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/magento2:2.2.1', 'appshop', 'enterprise', '16', 'Magento1.png,Magento2.png', 'magento.png', 'magento.png', '8', '16384', '2048', '2', 'large');
INSERT INTO `template` VALUES ('567', 'mediawiki', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  mediawiki:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mediawiki:1-master\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_ROOT_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_USER: root', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  mediawiki:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mediawiki:1-master\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_ROOT_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_USER: root', '2017-03-22 15:01:20', '2017-12-12 19:32:33', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MediaWiki is a powerful and extensible open-source wiki software. It is written in the PHP programming language and processes or displays the contents into a database such as Mysql .<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki user name. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki application password. Default value: bitnami1<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp MediaWiki是一个极其强大的、可扩展的软件，可以用PHP在像Mysql这样的数据库中处理和显示数据的功能丰富的wiki工具。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用程序密码。默认值: bitnami1<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mediawiki:1-master', 'appshop', 'enterprise', '11', 'MediaWiki1.png,MediaWiki2.png', 'mediawiki.png', 'mediawiki.png', '4', '8192', '1024', '2', 'medium');
INSERT INTO `template` VALUES ('568', 'mediawiki', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  mediawiki:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mediawiki:1-master\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_ROOT_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_USER: root', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  mediawiki:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mediawiki:1-master\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_ROOT_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_PASSWORD: pwd123456\n      MEDIAWIKI_DATABASE_USER: root', '2017-03-22 15:01:20', '2017-12-12 19:32:33', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MediaWiki is a powerful and extensible open-source wiki software. It is written in the PHP programming language and processes or displays the contents into a database such as Mysql .<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki user name. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki application password. Default value: bitnami1<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp MediaWiki是一个极其强大的、可扩展的软件，可以用PHP在像Mysql这样的数据库中处理和显示数据的功能丰富的wiki工具。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用程序密码。默认值: bitnami1<br>\r\n	&nbsp&nbsp&nbsp&nbsp MediaWiki 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mediawiki:1-master', 'appshop', 'enterprise', '11', 'MediaWiki1.png,MediaWiki2.png', 'mediawiki.png', 'mediawiki.png', '8', '16384', '1024', '2', 'large');
INSERT INTO `template` VALUES ('569', 'mongodb', 'services:\n mongo:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2\n  ports:\n    - port: 27017\n      protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  environment:\n    MONGODB_USER: hcpaas\n    MONGODB_PASSWORD: hcpaas123\n    MONGODB_DATABASE: hcpaasdb\n    MONGODB_ADMIN_PASSWORD: adminpwd123\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', 'services:\n mongo:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mongodb:3.2\n  ports:\n    - port: 27017\n      protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 412m\n  environment:\n    MONGODB_USER: hcpaas\n    MONGODB_PASSWORD: hcpaas123\n    MONGODB_DATABASE: hcpaasdb\n    MONGODB_ADMIN_PASSWORD: adminpwd123\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', '2017-06-27 15:49:49', '2017-09-08 14:59:06', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MongoDB is a cross-platform document-oriented database. Classified as a NoSQL database, MongoDB eschews the traditional table-based relational database structure. It stores data as a document, and the data structure consists of key-value pairs which contain other documents, arrays and document arrays, making the integration of data in certain types of applications easier and faster<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_ADMIN_PASSWORD &nbsp&nbsp&nbsp&nbsp Admin user password. Default Value：adminpwd123<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_DATABASE &nbsp&nbsp&nbsp&nbsp  Creating new database. If user/password is set up, the user will be allocated super use permissions of the database. Default creating: hcpaasdb<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_USER &nbsp&nbsp&nbsp&nbsp Creating new user. Default Value：hcpaas<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of new user. Default Value: hcpaas123<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp MongoDB是一个跨平台的面向文档的数据库。MongoDB被归类为NoSQL数据库，避开了传统的基于表的关系型数据库结构。它将数据存储为一个文档，数据结构由键值(key=>value)对组成，字段值可以包含其他文档、数组及文档数组，从而使数据在某些类型的应用程序中的集成更加容易快捷。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_ADMIN_PASSWORD &nbsp&nbsp&nbsp&nbsp 管理员用户密码。默认值：adminpwd123<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_DATABASE &nbsp&nbsp&nbsp&nbsp  新建数据库。如果user/password被设置，将赋予该user对该数据库的超级使用权限。默认创建：hcpaasdb<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_USER &nbsp&nbsp&nbsp&nbsp 新建用户。默认值：hcpaas<br>\r\n	&nbsp&nbsp&nbsp&nbsp MONGODB_PASSWORD &nbsp&nbsp&nbsp&nbsp 新建用户的密码。默认值：hcpaas123<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mongodb:3.2', 'appshop', 'midware', '1', 'mongoDB1.png,mongoDB2.png', 'mongodb.png', 'mongodb.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('570', 'mysql', 'services:\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 250m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', 'services:\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 250m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', '2016-12-30 20:12:57', '2017-09-08 15:03:36', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MySQL is the world\'s most popular open source and relational database management system. With its proven performance, reliability and ease-of-use, MySQL has become the leading database choice for web-based applications, covering the entire range from personal projects and websites, via e-commerce and information services, all the way to high profile web properties including Facebook, Twitter, YouTube and many more.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_ROOT_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of root user, and the default value is : password<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_DATABASE &nbsp&nbsp&nbsp&nbsp When you create a new mysql, if you have set your user/password, the system will give super use permissions to the user. Default no configuration.<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_USER &nbsp&nbsp&nbsp&nbsp Creating new user. Default no configuration.<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of the new user. Default no configuration.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Mysql是世界上最受欢迎的开源数据库，它是一种关系型数据库管理系统。由于它的高性能，可靠性和易用性，MySQL已经成为基于Web的应用程序的数据库首选，覆盖范围包括个人项目和网站，电子商务和信息服务，以及社交网络，如Facebook，Twitter，YouTube等。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_ROOT_PASSWORD &nbsp&nbsp&nbsp&nbsp ROOT用户密码，默认值：password<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_DATABASE &nbsp&nbsp&nbsp&nbsp 新建数据库，如果user/password被设置，将赋予该user对该数据库的超级使用权限。默认无配置<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_USER &nbsp&nbsp&nbsp&nbsp 新建用户。默认无配置<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_PASSWORD &nbsp&nbsp&nbsp&nbsp 新建用户的密码。默认无配置<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'midware', '6', 'mysql1.png,mysql2.png', 'mysql.png', 'mysql.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('571', 'mysql', 'services:\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 450m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', 'services:\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 450m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', '2016-12-30 20:12:57', '2017-09-08 15:03:36', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp MySQL is the world\'s most popular open source and relational database management system. With its proven performance, reliability and ease-of-use, MySQL has become the leading database choice for web-based applications, covering the entire range from personal projects and websites, via e-commerce and information services, all the way to high profile web properties including Facebook, Twitter, YouTube and many more.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_ROOT_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of root user, and the default value is : password<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_DATABASE &nbsp&nbsp&nbsp&nbsp When you create a new mysql, if you have set your user/password, the system will give super use permissions to the user. Default no configuration.<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_USER &nbsp&nbsp&nbsp&nbsp Creating new user. Default no configuration.<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_PASSWORD &nbsp&nbsp&nbsp&nbsp The password of the new user. Default no configuration.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Mysql是世界上最受欢迎的开源数据库，它是一种关系型数据库管理系统。由于它的高性能，可靠性和易用性，MySQL已经成为基于Web的应用程序的数据库首选，覆盖范围包括个人项目和网站，电子商务和信息服务，以及社交网络，如Facebook，Twitter，YouTube等。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_ROOT_PASSWORD &nbsp&nbsp&nbsp&nbsp ROOT用户密码，默认值：password<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_DATABASE &nbsp&nbsp&nbsp&nbsp 新建数据库，如果user/password被设置，将赋予该user对该数据库的超级使用权限。默认无配置<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_USER &nbsp&nbsp&nbsp&nbsp 新建用户。默认无配置<br>\r\n	&nbsp&nbsp&nbsp&nbsp MYSQL_PASSWORD &nbsp&nbsp&nbsp&nbsp 新建用户的密码。默认无配置<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'midware', '6', 'mysql1.png,mysql2.png', 'mysql.png', 'mysql.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('572', 'nexus', 'services:\n nexus:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/nexus:2.14.2\n  ports:\n    - port: 8081\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  volumeMounts:\n      - name: data\n        mountPath: /sonatype-work\n        volSize: 1024', 'services:\n nexus:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/nexus:2.14.2\n  ports:\n    - port: 8081\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 250m\n  volumeMounts:\n      - name: data\n        mountPath: /sonatype-work\n        volSize: 1024', '2017-01-12 16:30:10', '2017-10-19 17:44:13', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Nexus is the Maven repository manager, when you use Maven, you can download the essential artifact from the Maven central repository. However, it is usually not a good practice, so that you should set up a Maven repository server in local hosts, and it maintains remote agent repository at the same time local repository, in order to save bandwidth and time. Nexus can satisfy the demand. In addition, it also provides a powerful repository management and artifact searching , which is based on REST. The friendly UI is a extjs REST client that occupies little memory, and it is based on the simple file system not the database. All these advantages make the Nexus a most popular Maven repository manager.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp CONTEXT_PATH &nbsp&nbsp&nbsp&nbsp	Use ‘-Dexexus-webapp-context-path’to deliver，and  is used to visit the URL of Nexus，Default Value is：\'/nexus\'<br>\r\n	&nbsp&nbsp&nbsp&nbsp MAX_HEAP &nbsp&nbsp&nbsp&nbsp Used as –Xmx to deliver, Default Value is: 768m<br>\r\n	&nbsp&nbsp&nbsp&nbsp MIN_HEAP &nbsp&nbsp&nbsp&nbsp Used as -Xms to deliver, Default Value is: 256m<br>\r\n	&nbsp&nbsp&nbsp&nbsp JAVA_OPTS &nbsp&nbsp&nbsp&nbsp This variable can be used to deliver other option to JVM，Default Value is：-server-XX:MaxPermSize=192m-Djava.net.preferIPv4Stack=true<br>\r\n	&nbsp&nbsp&nbsp&nbsp LAUNCHER_CONF &nbsp&nbsp&nbsp&nbsp Provides list Nexus boot starter of config file，Default Value is：./conf/jetty.xml./conf/jetty-requestlog.xml<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password is admin/admin123<br>\r\n<b>Remarks：<br>\r\nPlease add / nexus after the platform service address when visiting (default setting)</b>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Nexus是Maven仓库管理器，如果使用Maven，可以从Maven中央仓库下载所需要的构件（artifact），但这通常不是一个好的做法，应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，Nexus就可以满足这样的需要。此外，它还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的 REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp CONTEXT_PATH &nbsp&nbsp&nbsp&nbsp	作为-Dexexus-webapp-context-path传递，用来定义访问Nexus的URL，默认值：\'/nexus\'<br>\r\n	&nbsp&nbsp&nbsp&nbsp MAX_HEAP &nbsp&nbsp&nbsp&nbsp 作为-Xmx传递，默认值：768m<br>\r\n	&nbsp&nbsp&nbsp&nbsp MIN_HEAP &nbsp&nbsp&nbsp&nbsp 作为-Xms传递，默认值：256m<br>\r\n	&nbsp&nbsp&nbsp&nbsp JAVA_OPTS &nbsp&nbsp&nbsp&nbsp 可以通过此变量将其他选项传递给JVM，默认值： -server -XX:MaxPermSize=192m -Djava.net.preferIPv4Stack=true<br>\r\n	&nbsp&nbsp&nbsp&nbsp LAUNCHER_CONF &nbsp&nbsp&nbsp&nbsp 提供给的配置文件的列表 Nexus引导启动器， 默认值： ./conf/jetty.xml ./conf/jetty-requestlog.xml<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin123<br>\r\n<b>备注：<br>\r\n访问时请在平台服务地址后面追加 /nexus（默认设置）</b>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/nexus:2.14.2', 'appshop', 'basic', '15', 'nexus1.png,nexus2.png', 'nexus.png', 'nexus.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('573', 'nexus', 'services:\n nexus:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/nexus:2.14.2\n  ports:\n    - port: 8081\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  volumeMounts:\n      - name: data\n        mountPath: /sonatype-work\n        volSize: 1024', 'services:\n nexus:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/nexus:2.14.2\n  ports:\n    - port: 8081\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 450m\n  volumeMounts:\n      - name: data\n        mountPath: /sonatype-work\n        volSize: 1024', '2017-01-12 16:30:10', '2017-10-19 17:44:13', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Nexus is the Maven repository manager, when you use Maven, you can download the essential artifact from the Maven central repository. However, it is usually not a good practice, so that you should set up a Maven repository server in local hosts, and it maintains remote agent repository at the same time local repository, in order to save bandwidth and time. Nexus can satisfy the demand. In addition, it also provides a powerful repository management and artifact searching , which is based on REST. The friendly UI is a extjs REST client that occupies little memory, and it is based on the simple file system not the database. All these advantages make the Nexus a most popular Maven repository manager.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp CONTEXT_PATH &nbsp&nbsp&nbsp&nbsp	Use ‘-Dexexus-webapp-context-path’to deliver，and  is used to visit the URL of Nexus，Default Value is：\'/nexus\'<br>\r\n	&nbsp&nbsp&nbsp&nbsp MAX_HEAP &nbsp&nbsp&nbsp&nbsp Used as –Xmx to deliver, Default Value is: 768m<br>\r\n	&nbsp&nbsp&nbsp&nbsp MIN_HEAP &nbsp&nbsp&nbsp&nbsp Used as -Xms to deliver, Default Value is: 256m<br>\r\n	&nbsp&nbsp&nbsp&nbsp JAVA_OPTS &nbsp&nbsp&nbsp&nbsp This variable can be used to deliver other option to JVM，Default Value is：-server-XX:MaxPermSize=192m-Djava.net.preferIPv4Stack=true<br>\r\n	&nbsp&nbsp&nbsp&nbsp LAUNCHER_CONF &nbsp&nbsp&nbsp&nbsp Provides list Nexus boot starter of config file，Default Value is：./conf/jetty.xml./conf/jetty-requestlog.xml<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password is admin/admin123<br>\r\n<b>Remarks：<br>\r\nPlease add / nexus after the platform service address when visiting (default setting)</b>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Nexus是Maven仓库管理器，如果使用Maven，可以从Maven中央仓库下载所需要的构件（artifact），但这通常不是一个好的做法，应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，Nexus就可以满足这样的需要。此外，它还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的 REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp CONTEXT_PATH &nbsp&nbsp&nbsp&nbsp	作为-Dexexus-webapp-context-path传递，用来定义访问Nexus的URL，默认值：\'/nexus\'<br>\r\n	&nbsp&nbsp&nbsp&nbsp MAX_HEAP &nbsp&nbsp&nbsp&nbsp 作为-Xmx传递，默认值：768m<br>\r\n	&nbsp&nbsp&nbsp&nbsp MIN_HEAP &nbsp&nbsp&nbsp&nbsp 作为-Xms传递，默认值：256m<br>\r\n	&nbsp&nbsp&nbsp&nbsp JAVA_OPTS &nbsp&nbsp&nbsp&nbsp 可以通过此变量将其他选项传递给JVM，默认值： -server -XX:MaxPermSize=192m -Djava.net.preferIPv4Stack=true<br>\r\n	&nbsp&nbsp&nbsp&nbsp LAUNCHER_CONF &nbsp&nbsp&nbsp&nbsp 提供给的配置文件的列表 Nexus引导启动器， 默认值： ./conf/jetty.xml ./conf/jetty-requestlog.xml<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin123<br>\r\n<b>备注：<br>\r\n访问时请在平台服务地址后面追加 /nexus（默认设置）</b>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/nexus:2.14.2', 'appshop', 'basic', '15', 'nexus1.png,nexus2.png', 'nexus.png', 'nexus.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('574', 'odoo', 'services:\n  postgres:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2\n    ports:\n      - port: 5432\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      POSTGRES_USER: odoo\n      POSTGRES_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/postgresql/data\n        volSize: 1024\n  odoo:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0\n    ports:\n      - port: 8069\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      HOST: ${name}-postgres\n      PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/lib/odoo\n        volSize: 1024\n      - name: data3\n        mountPath: /mnt/extra-addons\n        volSize: 1024', 'services:\n  postgres:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2\n    ports:\n      - port: 5432\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      POSTGRES_USER: odoo\n      POSTGRES_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/postgresql/data\n        volSize: 1024\n  odoo:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0\n    ports:\n      - port: 8069\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      HOST: ${name}-postgres\n      PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/lib/odoo\n        volSize: 1024\n      - name: data3\n        mountPath: /mnt/extra-addons\n        volSize: 1024', '2017-03-22 15:59:26', '2017-12-21 14:52:00', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal is a general open-source content-management system. It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Odoo是一套基于开源的Web商业应用。Odoo可以作为独立的应用程序，也可以无缝地集成你安装的好几个应用，让你能给得到一个全功能的开源ERP。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Odoo  的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Odoo  的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0', 'appshop', 'enterprise', '16', 'odoo1.png,odoo2.png', 'odoo.png', 'odoo.png', '4', '8192', '3072', '2', 'medium');
INSERT INTO `template` VALUES ('575', 'odoo', 'services:\n  postgres:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2\n    ports:\n      - port: 5432\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      POSTGRES_USER: odoo\n      POSTGRES_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/postgresql/data\n        volSize: 1024\n  odoo:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0\n    ports:\n      - port: 8069\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      HOST: ${name}-postgres\n      PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/lib/odoo\n        volSize: 1024\n      - name: data3\n        mountPath: /mnt/extra-addons\n        volSize: 1024', 'services:\n  postgres:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2\n    ports:\n      - port: 5432\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      POSTGRES_USER: odoo\n      POSTGRES_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/postgresql/data\n        volSize: 1024\n  odoo:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0\n    ports:\n      - port: 8069\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      HOST: ${name}-postgres\n      PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /var/lib/odoo\n        volSize: 1024\n      - name: data3\n        mountPath: /mnt/extra-addons\n        volSize: 1024', '2017-03-22 15:59:26', '2017-12-21 14:52:00', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Drupal is a general open-source content-management system. It is powerful, easy to expand, easy to integrate through REST, JSON, SOAP and a variety of formats, with up to 1500 plugins to expand and customize various types of application site.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application username. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Drupal application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Odoo是一套基于开源的Web商业应用。Odoo可以作为独立的应用程序，也可以无缝地集成你安装的好几个应用，让你能给得到一个全功能的开源ERP。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp Odoo  的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp Odoo  的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/postgres:9.6.2,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/odoo:10.0', 'appshop', 'enterprise', '16', 'odoo1.png,odoo2.png', 'odoo.png', 'odoo.png', '8', '16384', '3072', '2', 'large');
INSERT INTO `template` VALUES ('576', 'orangehrm', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  orangehrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/orangehrm:4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  orangehrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/orangehrm:4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', '2017-03-14 09:25:11', '2017-10-19 17:43:45', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp OrangeHRM Open Source is a free HR management system that offers a wealth of modules to suit the needs of your business. This widely-used system is feature-rich, intuitive and provides an essential HR management platform along with free documentation and access to a broad community of users.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM user name. Default value: admin<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM application password. Default value: bitnami<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp OrangeHRM开源是一个免费的人力资源管理系统，它提供了一个丰富的模块以适应您业务的需求。这个使用广泛的系统不仅功能丰富、直观，而且除了提供基本的HR管理平台功能外还带有免费的说明文档和一个大的用户社区。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM 的应用用户名。默认值: admin<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM 的应用程序密码。默认值: bitnami<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/orangehrm:4', 'appshop', 'enterprise', '15', 'OrangrHRM1.png,OrangrHRM2.png', 'orangehrm.png', 'orangehrm.png', '4', '8192', '1024', '2', 'medium');
INSERT INTO `template` VALUES ('577', 'orangehrm', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  orangehrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/orangehrm:4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  orangehrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/orangehrm:4\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456', '2017-03-14 09:25:11', '2017-10-19 17:43:45', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp OrangeHRM Open Source is a free HR management system that offers a wealth of modules to suit the needs of your business. This widely-used system is feature-rich, intuitive and provides an essential HR management platform along with free documentation and access to a broad community of users.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM user name. Default value: admin<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM application password. Default value: bitnami<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp OrangeHRM开源是一个免费的人力资源管理系统，它提供了一个丰富的模块以适应您业务的需求。这个使用广泛的系统不仅功能丰富、直观，而且除了提供基本的HR管理平台功能外还带有免费的说明文档和一个大的用户社区。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM 的应用用户名。默认值: admin<br>\r\n	&nbsp&nbsp&nbsp&nbsp OrangeHRM 的应用程序密码。默认值: bitnami<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/orangehrm:4', 'appshop', 'enterprise', '15', 'OrangrHRM1.png,OrangrHRM2.png', 'orangehrm.png', 'orangehrm.png', '8', '16384', '1024', '2', 'large');
INSERT INTO `template` VALUES ('578', 'rabbitmq', 'services:\n  rabbitmq:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\n    ports:\n      - port: 5672\n        protocol: TCP\n      - port: 25672\n        protocol: TCP\n      - port: 4369\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/rabbitmq\n        volSize: 1024', 'services:\n  rabbitmq:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/rabbitmq:3.6.6-management\n    ports:\n      - port: 5672\n        protocol: TCP\n      - port: 25672\n        protocol: TCP\n      - port: 4369\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/rabbitmq\n        volSize: 1024', '2017-03-14 09:34:41', '2017-11-25 14:35:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ is a popular open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP). The RabbitMQ server is written in the Erlang programming language and is applied to integrate messages between applications or different components of a program. Client libraries to interface with the broker are available for all major programming languages.RabbitMQ can be used to analog different scenarios, such as point to point message distribution, subscription or notification.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  Client communication port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 Internal communication port between servers<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang discovery port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web administration port<br>\r\n	&nbsp&nbsp&nbsp&nbsp If you would like to visit web, please enter command: rabbitmq-pluginsenablerabbitmq_management.Address: http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default user account and password: guest/guest, the role is administrator.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。RabbitMQ是由Erlang语言开发，对于主要的编程语言都有驱动或者客户端。RabbitMQ可用来模拟不同的场景，例如点对点的消息分发或者订阅/推送。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  客户端通信端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 服务器间内部通信口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang发现端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web管理端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 开启web访问，输入命令 rabbitmq-plugins enable rabbitmq_management 。http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认用户密码 guest/guest ，角色 administrator 。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management', 'appshop', 'midware', '24', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('579', 'rabbitmq', 'services:\n  rabbitmq:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\n    ports:\n      - port: 5672\n        protocol: TCP\n      - port: 25672\n        protocol: TCP\n      - port: 4369\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/rabbitmq\n        volSize: 1024', 'services:\n  rabbitmq:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/rabbitmq:3.6.6-management\n    ports:\n      - port: 5672\n        protocol: TCP\n      - port: 25672\n        protocol: TCP\n      - port: 4369\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    volumeMounts:\n      - name: data\n        mountPath: /var/lib/rabbitmq\n        volSize: 1024', '2017-03-14 09:34:41', '2017-11-25 14:35:22', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ is a popular open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP). The RabbitMQ server is written in the Erlang programming language and is applied to integrate messages between applications or different components of a program. Client libraries to interface with the broker are available for all major programming languages.RabbitMQ can be used to analog different scenarios, such as point to point message distribution, subscription or notification.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  Client communication port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 Internal communication port between servers<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang discovery port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web administration port<br>\r\n	&nbsp&nbsp&nbsp&nbsp If you would like to visit web, please enter command: rabbitmq-pluginsenablerabbitmq_management.Address: http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default user account and password: guest/guest, the role is administrator.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。RabbitMQ是由Erlang语言开发，对于主要的编程语言都有驱动或者客户端。RabbitMQ可用来模拟不同的场景，例如点对点的消息分发或者订阅/推送。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  客户端通信端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 服务器间内部通信口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang发现端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web管理端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 开启web访问，输入命令 rabbitmq-plugins enable rabbitmq_management 。http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认用户密码 guest/guest ，角色 administrator 。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management', 'appshop', 'midware', '24', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('580', 'RabbitMQ持久化-beta1', 'services:\r\n  rabbitmq:\r\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\r\n    ports:\r\n      - port: 5672\r\n        protocol: TCP\r\n      - port: 25672\r\n        protocol: TCP\r\n      - port: 4369\r\n        protocol: TCP\r\n      - port: 15672\r\n        protocol: HTTP\r\n    replicas: 1\r\n    mem_limit: 4096Mi\r\n    cpu_shares: 2\r\n    volumeMounts:\r\n      - name: data\r\n        mountPath: /var/lib/rabbitmq\r\n        volSize: 1024\r\n    environment:\r\n      HOSTNAME: localhost', 'services:\r\n  rabbitmq:\r\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\r\n    ports:\r\n      - port: 5672\r\n        protocol: TCP\r\n      - port: 25672\r\n        protocol: TCP\r\n      - port: 4369\r\n        protocol: TCP\r\n      - port: 15672\r\n        protocol: HTTP\r\n    replicas: 1\r\n    mem_limit: 4096Mi\r\n    cpu_shares: 2\r\n    volumeMounts:\r\n      - name: data\r\n        mountPath: /var/lib/rabbitmq\r\n        volSize: 1024\r\n    environment:\r\n      HOSTNAME: localhost', '2017-11-30 15:17:00', '2018-08-16 04:59:04', '682', 'Introduction：<br><br>&nbsp&nbsp&nbsp&nbsp&nbspRabbitMQ&nbspis&nbspa&nbsppopular&nbspopen&nbspsource&nbspmessage&nbspbroker&nbspsoftware&nbsp(sometimes&nbspcalled&nbspmessage-oriented&nbspmiddleware)&nbspthat&nbspimplements&nbspthe&nbspAdvanced&nbspMessage&nbspQueuing&nbspProtocol&nbsp(AMQP).&nbspThe&nbspRabbitMQ&nbspserver&nbspis&nbspwritten&nbspin&nbspthe&nbspErlang&nbspprogramming&nbsplanguage&nbspand&nbspis&nbspapplied&nbspto&nbspintegrate&nbspmessages&nbspbetween&nbspapplications&nbspor&nbspdifferent&nbspcomponents&nbspof&nbspa&nbspprogram.&nbspClient&nbsplibraries&nbspto&nbspinterface&nbspwith&nbspthe&nbspbroker&nbspare&nbspavailable&nbspfor&nbspall&nbspmajor&nbspprogramming&nbsplanguages.RabbitMQ&nbspcan&nbspbe&nbspused&nbspto&nbspanalog&nbspdifferent&nbspscenarios,&nbspsuch&nbspas&nbsppoint&nbspto&nbsppoint&nbspmessage&nbspdistribution,&nbspsubscription&nbspor&nbspnotification.<br><br><br>Configuration&nbspInformation：<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp5672&nbsp&nbspClient&nbspcommunication&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp25672&nbspInternal&nbspcommunication&nbspport&nbspbetween&nbspservers<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4369&nbsp&nbspErlang&nbspdiscovery&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp15672&nbspWeb&nbspadministration&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspIf&nbspyou&nbspwould&nbsplike&nbspto&nbspvisit&nbspweb,&nbspplease&nbspenter&nbspcommand:&nbsprabbitmq-pluginsenablerabbitmq_management.Address:&nbsphttp://your_ip_address:15672/<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspDefault&nbspuser&nbspaccount&nbspand&nbsppassword:&nbspguest/guest,&nbspthe&nbsprole&nbspis&nbspadministrator.<br><br><b>Messages&nbsppersistent&nbspprovided</b><br>', '简介：<br><br>&nbsp&nbsp&nbsp&nbsp&nbspRabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。RabbitMQ是由Erlang语言开发，对于主要的编程语言都有驱动或者客户端。RabbitMQ可用来模拟不同的场景，例如点对点的消息分发或者订阅/推送。<br><br><br>配置信息：<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp5672&nbsp&nbsp客户端通信端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp25672&nbsp服务器间内部通信口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4369&nbsp&nbspErlang发现端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp15672&nbspWeb管理端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp开启web访问，输入命令&nbsprabbitmq-plugins&nbspenable&nbsprabbitmq_management&nbsp。http://your_ip_address:15672/<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp默认用户密码&nbspguest/guest&nbsp，角色&nbspadministrator&nbsp。<br><br><b>此版本提供消息持久化</b>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management', 'appshop', 'midware', '8', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('581', 'RabbitMQ持久化-beta1', 'services:\r\n  rabbitmq:\r\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\r\n    ports:\r\n      - port: 5672\r\n        protocol: TCP\r\n      - port: 25672\r\n        protocol: TCP\r\n      - port: 4369\r\n        protocol: TCP\r\n      - port: 15672\r\n        protocol: HTTP\r\n    replicas: 1\r\n    mem_limit: 8192Mi\r\n    cpu_shares: 4\r\n    volumeMounts:\r\n      - name: data\r\n        mountPath: /var/lib/rabbitmq\r\n        volSize: 1024\r\n    environment:\r\n      HOSTNAME: localhost', 'services:\r\n  rabbitmq:\r\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management\r\n    ports:\r\n      - port: 5672\r\n        protocol: TCP\r\n      - port: 25672\r\n        protocol: TCP\r\n      - port: 4369\r\n        protocol: TCP\r\n      - port: 15672\r\n        protocol: HTTP\r\n    replicas: 1\r\n    mem_limit: 8192Mi\r\n    cpu_shares: 4\r\n    volumeMounts:\r\n      - name: data\r\n        mountPath: /var/lib/rabbitmq\r\n        volSize: 1024\r\n    environment:\r\n      HOSTNAME: localhost', '2017-11-30 15:17:00', '2018-08-16 04:59:04', '682', 'Introduction：<br><br>&nbsp&nbsp&nbsp&nbsp&nbspRabbitMQ&nbspis&nbspa&nbsppopular&nbspopen&nbspsource&nbspmessage&nbspbroker&nbspsoftware&nbsp(sometimes&nbspcalled&nbspmessage-oriented&nbspmiddleware)&nbspthat&nbspimplements&nbspthe&nbspAdvanced&nbspMessage&nbspQueuing&nbspProtocol&nbsp(AMQP).&nbspThe&nbspRabbitMQ&nbspserver&nbspis&nbspwritten&nbspin&nbspthe&nbspErlang&nbspprogramming&nbsplanguage&nbspand&nbspis&nbspapplied&nbspto&nbspintegrate&nbspmessages&nbspbetween&nbspapplications&nbspor&nbspdifferent&nbspcomponents&nbspof&nbspa&nbspprogram.&nbspClient&nbsplibraries&nbspto&nbspinterface&nbspwith&nbspthe&nbspbroker&nbspare&nbspavailable&nbspfor&nbspall&nbspmajor&nbspprogramming&nbsplanguages.RabbitMQ&nbspcan&nbspbe&nbspused&nbspto&nbspanalog&nbspdifferent&nbspscenarios,&nbspsuch&nbspas&nbsppoint&nbspto&nbsppoint&nbspmessage&nbspdistribution,&nbspsubscription&nbspor&nbspnotification.<br><br><br>Configuration&nbspInformation：<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp5672&nbsp&nbspClient&nbspcommunication&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp25672&nbspInternal&nbspcommunication&nbspport&nbspbetween&nbspservers<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4369&nbsp&nbspErlang&nbspdiscovery&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp15672&nbspWeb&nbspadministration&nbspport<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspIf&nbspyou&nbspwould&nbsplike&nbspto&nbspvisit&nbspweb,&nbspplease&nbspenter&nbspcommand:&nbsprabbitmq-pluginsenablerabbitmq_management.Address:&nbsphttp://your_ip_address:15672/<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspDefault&nbspuser&nbspaccount&nbspand&nbsppassword:&nbspguest/guest,&nbspthe&nbsprole&nbspis&nbspadministrator.<br><br><b>Messages&nbsppersistent&nbspprovided</b><br>', '简介：<br><br>&nbsp&nbsp&nbsp&nbsp&nbspRabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。RabbitMQ是由Erlang语言开发，对于主要的编程语言都有驱动或者客户端。RabbitMQ可用来模拟不同的场景，例如点对点的消息分发或者订阅/推送。<br><br><br>配置信息：<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp5672&nbsp&nbsp客户端通信端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp25672&nbsp服务器间内部通信口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4369&nbsp&nbspErlang发现端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp15672&nbspWeb管理端口<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp开启web访问，输入命令&nbsprabbitmq-plugins&nbspenable&nbsprabbitmq_management&nbsp。http://your_ip_address:15672/<br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp默认用户密码&nbspguest/guest&nbsp，角色&nbspadministrator&nbsp。<br><br><b>此版本提供消息持久化</b>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq:3.6.6-management', 'appshop', 'midware', '8', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('582', 'RabbitMQ集群-beta', 'services:\n  etcd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/etcd:caas\n    ports:\n      - port: 4001\n        protocol: TCP\n      - port: 7001\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n  rqcluster:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq-autocluster:caas-1.2\n    ports:\n      - port: 4369\n        protocol: TCP\n      - port: 5671\n        protocol: TCP\n      - port: 5672\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n      - port: 25672\n        protocol: TCP\n    replicas: 3\n    mem_limit: 4096Mi\n    cpu_shares: 2    \n    environment:\n      AUTOCLUSTER_TYPE: etcd\n      ETCD_HOST: ${name}-etcd\n      CLEANUP_WARN_ONLY: false\n      valueFrom_MY_POD_IP: status.podIP\n      RABBITMQ_NODENAME: rabbit@$(MY_POD_IP)\n      AUTOCLUSTER_CLEANUP: true\n      RABBITMQ_USE_LONGNAME: true\n      ETCD_PORT: 4001\n      AUTOCLUSTER_DELAY: 300', 'services:\n  etcd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/etcd:caas\n    ports:\n      - port: 4001\n        protocol: TCP\n      - port: 7001\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n  rqcluster:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/rabbitmq-autocluster:caas-1.2\n    ports:\n      - port: 4369\n        protocol: TCP\n      - port: 5671\n        protocol: TCP\n      - port: 5672\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n      - port: 25672\n        protocol: TCP\n    replicas: 3\n    mem_limit: 4096Mi\n    cpu_shares: 2    \n    environment:\n      AUTOCLUSTER_TYPE: etcd\n      ETCD_HOST: ${name}-etcd\n      CLEANUP_WARN_ONLY: false\n      valueFrom_MY_POD_IP: status.podIP\n      RABBITMQ_NODENAME: rabbit@$(MY_POD_IP)\n      AUTOCLUSTER_CLEANUP: true\n      RABBITMQ_USE_LONGNAME: true\n      ETCD_PORT: 4001\n      AUTOCLUSTER_DELAY: 300', '2017-09-30 10:30:38', '2017-12-14 09:20:14', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ is a popular open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP). It is applied to integrate messages between applications or different components of a program. The RabbitMQ cluster is deployed with the clustering pattern to realize the function that part of the nodes failure does not affect the operation between the consumer and the producer. In addition, this pattern can extend the message communication throughput by adding more nodes.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  Client communication port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 nternal communication port between servers<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang discovery port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web administration port<br>\r\n	&nbsp&nbsp&nbsp&nbsp If you would like to visit web, please enter command: rabbitmq-pluginsenablerabbitmq_management.Address: http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default user account and password: guest/guest, the role is administrator.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。此RabbitMQ集群以cluster的方式来部署，达到两个目的：1.&nbsp部分RabbitMQ节点故障不影响消费者和生产者运行；2.&nbsp可以通过加更多的节点来扩展消息通信的吞吐量。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  客户端通信端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 服务器间内部通信口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang发现端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web管理端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 开启web访问，输入命令 rabbitmq-plugins enable rabbitmq_management 。http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认用户密码 guest/guest ，角色 administrator 。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/etcd:caas,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq-autocluster:caas-1.2', 'appshop', 'midware', '40', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '8', '16384', '0', '4', 'medium');
INSERT INTO `template` VALUES ('583', 'RabbitMQ集群-beta', 'services:\n  etcd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/etcd:caas\n    ports:\n      - port: 4001\n        protocol: TCP\n      - port: 7001\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n  rqcluster:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq-autocluster:caas-1.2\n    ports:\n      - port: 4369\n        protocol: TCP\n      - port: 5671\n        protocol: TCP\n      - port: 5672\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n      - port: 25672\n        protocol: TCP\n    replicas: 3\n    mem_limit: 8192Mi\n    cpu_shares: 4    \n    environment:\n      AUTOCLUSTER_TYPE: etcd\n      ETCD_HOST: ${name}-etcd\n      CLEANUP_WARN_ONLY: false\n      valueFrom_MY_POD_IP: status.podIP\n      RABBITMQ_NODENAME: rabbit@$(MY_POD_IP)\n      AUTOCLUSTER_CLEANUP: true\n      RABBITMQ_USE_LONGNAME: true\n      ETCD_PORT: 4001\n      AUTOCLUSTER_DELAY: 300', 'services:\n  etcd:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/etcd:caas\n    ports:\n      - port: 4001\n        protocol: TCP\n      - port: 7001\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n  rqcluster:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/rabbitmq-autocluster:caas-1.2\n    ports:\n      - port: 4369\n        protocol: TCP\n      - port: 5671\n        protocol: TCP\n      - port: 5672\n        protocol: TCP\n      - port: 15672\n        protocol: HTTP\n      - port: 25672\n        protocol: TCP\n    replicas: 3\n    mem_limit: 8192Mi\n    cpu_shares: 4    \n    environment:\n      AUTOCLUSTER_TYPE: etcd\n      ETCD_HOST: ${name}-etcd\n      CLEANUP_WARN_ONLY: false\n      valueFrom_MY_POD_IP: status.podIP\n      RABBITMQ_NODENAME: rabbit@$(MY_POD_IP)\n      AUTOCLUSTER_CLEANUP: true\n      RABBITMQ_USE_LONGNAME: true\n      ETCD_PORT: 4001\n      AUTOCLUSTER_DELAY: 300', '2017-09-30 10:30:38', '2017-12-14 09:20:14', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ is a popular open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP). It is applied to integrate messages between applications or different components of a program. The RabbitMQ cluster is deployed with the clustering pattern to realize the function that part of the nodes failure does not affect the operation between the consumer and the producer. In addition, this pattern can extend the message communication throughput by adding more nodes.<br><br>\r\nConfiguration Information:<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  Client communication port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 nternal communication port between servers<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang discovery port<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web administration port<br>\r\n	&nbsp&nbsp&nbsp&nbsp If you would like to visit web, please enter command: rabbitmq-pluginsenablerabbitmq_management.Address: http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default user account and password: guest/guest, the role is administrator.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp RabbitMQ是一个受欢迎的开源消息代理，是AMQP（高级消息队列协议）的标准实现，通常用于应用程序之间或者程序的不同组件之间通过消息来进行集成。此RabbitMQ集群以cluster的方式来部署，达到两个目的：1.&nbsp部分RabbitMQ节点故障不影响消费者和生产者运行；2.&nbsp可以通过加更多的节点来扩展消息通信的吞吐量。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 5672  客户端通信端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 25672 服务器间内部通信口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 4369  Erlang发现端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 15672 Web管理端口<br>\r\n	&nbsp&nbsp&nbsp&nbsp 开启web访问，输入命令 rabbitmq-plugins enable rabbitmq_management 。http://your_ip_address:15672/<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认用户密码 guest/guest ，角色 administrator 。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/etcd:caas,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/rabbitmq-autocluster:caas-1.2', 'appshop', 'midware', '39', 'rabbitmq1.png,rabbitmq2.png', 'rabbitmq.png', 'rabbitmq.png', '16', '32768', '0', '4', 'large');
INSERT INTO `template` VALUES ('584', 'redis', 'services:\n redis:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redis:3.2.3\n  ports:\n    - port: 6379\n      protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', 'services:\n redis:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/redis:3.2.3\n  ports:\n    - port: 6379\n      protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', '2016-12-30 20:13:04', '2017-12-14 10:17:18', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp The name Redis means REmote DIctionary Server Which is written by SalvatoreSanfilippo a key-value storage system. Redis is an open source (with BSD licensed) and written in ANSIC language, networked, in-memory, key-value data store with optional durability. Besides, it provides several language APIs.<br>\r\n&nbsp&nbsp&nbsp&nbsp Redis is often referred as data structures database , so that the key stores the value which contains strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. <br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp No redis.conf file. Please check or modify config dynamically with the client commands: redis-cli.\r\nDefault no password.<br>\r\n	&nbsp&nbsp&nbsp&nbsp Method: Enter redis-cli-h{ADDR}-p{PORT}[-a{PASS}] <br>\r\n	&nbsp&nbsp&nbsp&nbsp Operation command, for example, checking config CONFIGGET{parameter}\r\n(To check all configs: CONFIGGET*) ;<br>\r\n	&nbsp&nbsp&nbsp&nbsp Or modifying config: CONFIGSET{parameter}{value}<br>\r\n	&nbsp&nbsp&nbsp&nbsp For more commands, please visit and check: https://redis.io/commands<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>\r\n&nbsp&nbsp&nbsp&nbsp 它通常被称为数据结构服务器，因为键（key）存储的值（value）可以包含string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)、hash（哈希类型）、bitmaps（位图）和hyperloglogs（超文本）。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 无redis.conf文件。请使用客户端命令redis-cli查看或动态更改配置。默认无密码。<br>\r\n	&nbsp&nbsp&nbsp&nbsp 用法 redis-cli -h {ADDR} -p {PORT} [-a {PASS}] <br>\r\n	&nbsp&nbsp&nbsp&nbsp 操作命令如，查看配置 CONFIG GET {parameter} （查看所有配置 CONFIG GET * ）<br>\r\n	&nbsp&nbsp&nbsp&nbsp 修改配置 CONFIG SET {parameter} {value}<br>\r\n	&nbsp&nbsp&nbsp&nbsp 更多命令，请阅 https://redis.io/commands<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redis:3.2.3', 'appshop', 'midware', '10', 'redis1.png,Redis2.png', 'redis.png', 'redis.png', '2', '4096', '1024', '1', 'medium');
INSERT INTO `template` VALUES ('585', 'redis', 'services:\n redis:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redis:3.2.3\n  ports:\n    - port: 6379\n      protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', 'services:\n redis:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/redis:3.2.3\n  ports:\n    - port: 6379\n      protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  volumeMounts:\n      - name: data\n        mountPath: /data\n        volSize: 1024', '2016-12-30 20:13:04', '2017-12-14 10:17:18', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp The name Redis means REmote DIctionary Server Which is written by SalvatoreSanfilippo a key-value storage system. Redis is an open source (with BSD licensed) and written in ANSIC language, networked, in-memory, key-value data store with optional durability. Besides, it provides several language APIs.<br>\r\n&nbsp&nbsp&nbsp&nbsp Redis is often referred as data structures database , so that the key stores the value which contains strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. <br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp No redis.conf file. Please check or modify config dynamically with the client commands: redis-cli.\r\nDefault no password.<br>\r\n	&nbsp&nbsp&nbsp&nbsp Method: Enter redis-cli-h{ADDR}-p{PORT}[-a{PASS}] <br>\r\n	&nbsp&nbsp&nbsp&nbsp Operation command, for example, checking config CONFIGGET{parameter}\r\n(To check all configs: CONFIGGET*) ;<br>\r\n	&nbsp&nbsp&nbsp&nbsp Or modifying config: CONFIGSET{parameter}{value}<br>\r\n	&nbsp&nbsp&nbsp&nbsp For more commands, please visit and check: https://redis.io/commands<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>\r\n&nbsp&nbsp&nbsp&nbsp 它通常被称为数据结构服务器，因为键（key）存储的值（value）可以包含string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)、hash（哈希类型）、bitmaps（位图）和hyperloglogs（超文本）。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp 无redis.conf文件。请使用客户端命令redis-cli查看或动态更改配置。默认无密码。<br>\r\n	&nbsp&nbsp&nbsp&nbsp 用法 redis-cli -h {ADDR} -p {PORT} [-a {PASS}] <br>\r\n	&nbsp&nbsp&nbsp&nbsp 操作命令如，查看配置 CONFIG GET {parameter} （查看所有配置 CONFIG GET * ）<br>\r\n	&nbsp&nbsp&nbsp&nbsp 修改配置 CONFIG SET {parameter} {value}<br>\r\n	&nbsp&nbsp&nbsp&nbsp 更多命令，请阅 https://redis.io/commands<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redis:3.2.3', 'appshop', 'midware', '12', 'redis1.png,Redis2.png', 'redis.png', 'redis.png', '4', '8192', '1024', '1', 'large');
INSERT INTO `template` VALUES ('586', 'redmine', 'services:\n redmine:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redmine:3.3.2.stable\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  environment:\n    DB_HOST: ${name}-mysql\n    DB_PASS: password\n  volumeMounts:\n      - name: data1\n        mountPath: /usr/src/redmine/files\n        volSize: 1024\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data2\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', 'services:\n redmine:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/redmine:3.3.2.stable\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 250m\n  environment:\n    DB_HOST: ${name}-mysql\n    DB_PASS: password\n  volumeMounts:\n      - name: data1\n        mountPath: /usr/src/redmine/files\n        volSize: 1024\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 250m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data2\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', '2016-12-30 21:32:32', '2017-10-24 09:06:05', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Redmine is a free and open source, web-based project management and issue tracking tool. It allows users to manage multiple projects and associated subprojects. It features per project wikis and forums, time tracking, and flexible role based access control. It includes a calendar and Gantt charts to aid visual representation of projects and their deadlines. Redmine integrates with various version control systems and includes a repository browser and diff viewer.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_NO_DB_MIGRATE &nbsp&nbsp&nbsp&nbsp This variable allows to control the rakedb:migrate that if it is running when the container is starting up.<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_SECRET_KEY_BASE &nbsp&nbsp&nbsp&nbsp This variable is used to create an initial config/secrets.yml, and configure the value of secret_key_base.<br>\r\n	&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp The‘Rails’is used to store Cookie of coding session data so that prevents being distorted.<br>	\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password is admin/admin, and it is modified compulsively when you first sign in.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Redmine是一个免费的开放源码，基于Web的项目管理和问题跟踪工具。 它允许用户管理多个项目和相关子项目。 它具有每个项目维基和论坛，时间跟踪和灵活的基于角色的访问控制。 它包括一个日历和甘特图，以帮助项目的视觉表示及其截止日期。 Redmine与各种版本控制系统集成，并包括存储库浏览器和差异查看器。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_NO_DB_MIGRATE &nbsp&nbsp&nbsp&nbsp 该变量允许您控制rake db：migrate是否在容器启动时运行。<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_SECRET_KEY_BASE &nbsp&nbsp&nbsp&nbsp 该变量用于创建一个初始config/secrets.yml，并设置secret_key_base值，<br>\r\n	&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp “Rails”用于编码存储会话数据的Cookie，从而防止其篡改。<br>	\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin ，首次登陆强制修改。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redmine:3.3.2.stable,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'basic', '16', 'redmine1.png,redmine2.png', 'redmine.png', 'redmine.png', '4', '8192', '2048', '2', 'medium');
INSERT INTO `template` VALUES ('587', 'redmine', 'services:\n redmine:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redmine:3.3.2.stable\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  environment:\n    DB_HOST: ${name}-mysql\n    DB_PASS: password\n  volumeMounts:\n      - name: data1\n        mountPath: /usr/src/redmine/files\n        volSize: 1024\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data2\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', 'services:\n redmine:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/redmine:3.3.2.stable\n  ports:\n    - port: 80\n      protocol: HTTP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 450m\n  environment:\n    DB_HOST: ${name}-mysql\n    DB_PASS: password\n  volumeMounts:\n      - name: data1\n        mountPath: /usr/src/redmine/files\n        volSize: 1024\n mysql:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n  ports:\n   - port: 3306\n     protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 450m\n  environment:\n    MYSQL_ROOT_PASSWORD: password\n  volumeMounts:\n      - name: data2\n        mountPath: /var/lib/mysql/data\n        volSize: 1024', '2016-12-30 21:32:32', '2017-10-24 09:06:05', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp Redmine is a free and open source, web-based project management and issue tracking tool. It allows users to manage multiple projects and associated subprojects. It features per project wikis and forums, time tracking, and flexible role based access control. It includes a calendar and Gantt charts to aid visual representation of projects and their deadlines. Redmine integrates with various version control systems and includes a repository browser and diff viewer.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_NO_DB_MIGRATE &nbsp&nbsp&nbsp&nbsp This variable allows to control the rakedb:migrate that if it is running when the container is starting up.<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_SECRET_KEY_BASE &nbsp&nbsp&nbsp&nbsp This variable is used to create an initial config/secrets.yml, and configure the value of secret_key_base.<br>\r\n	&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp The‘Rails’is used to store Cookie of coding session data so that prevents being distorted.<br>	\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password is admin/admin, and it is modified compulsively when you first sign in.<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp Redmine是一个免费的开放源码，基于Web的项目管理和问题跟踪工具。 它允许用户管理多个项目和相关子项目。 它具有每个项目维基和论坛，时间跟踪和灵活的基于角色的访问控制。 它包括一个日历和甘特图，以帮助项目的视觉表示及其截止日期。 Redmine与各种版本控制系统集成，并包括存储库浏览器和差异查看器。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_NO_DB_MIGRATE &nbsp&nbsp&nbsp&nbsp 该变量允许您控制rake db：migrate是否在容器启动时运行。<br>\r\n	&nbsp&nbsp&nbsp&nbsp REDMINE_SECRET_KEY_BASE &nbsp&nbsp&nbsp&nbsp 该变量用于创建一个初始config/secrets.yml，并设置secret_key_base值，<br>\r\n	&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp “Rails”用于编码存储会话数据的Cookie，从而防止其篡改。<br>	\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin ，首次登陆强制修改。<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/redmine:3.3.2.stable,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'basic', '16', 'redmine1.png,redmine2.png', 'redmine.png', 'redmine.png', '8', '16384', '2048', '2', 'large');
INSERT INTO `template` VALUES ('588', 'sonarqube', 'services:\n sonarqube:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/sonarqube:6.5\n  ports:\n    - port: 9000\n      protocol: HTTP\n    - port: 9092\n      protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 2\n  environment:\n    AUTH: no\n    SONARQUBE_JDBC_USERNAME: sonar\n    SONARQUBE_JDBC_PASSWORD: sonarpwd\n    SONARQUBE_JDBC_URL: jdbc:mysql://${name}-mysql:3306/sonar?useUnicode=true&characterEncoding=utf8\n  volumeMounts:\n      - name: data\n        mountPath: /opt/sonarqube/data\n        volSize: 1024\n mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: adminpwd\n      MYSQL_USER: sonar\n      MYSQL_PASSWORD: sonarpwd\n      MYSQL_DATABASE: sonar', 'services:\n sonarqube:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/sonarqube:6.5\n  ports:\n    - port: 9000\n      protocol: HTTP\n    - port: 9092\n      protocol: TCP\n  replicas: 1\n  mem_limit: 4096Mi\n  cpu_shares: 250m\n  environment:\n    AUTH: no\n    SONARQUBE_JDBC_USERNAME: sonar\n    SONARQUBE_JDBC_PASSWORD: sonarpwd\n    SONARQUBE_JDBC_URL: jdbc:mysql://${name}-mysql:3306/sonar?useUnicode=true&characterEncoding=utf8\n  volumeMounts:\n      - name: data\n        mountPath: /opt/sonarqube/data\n        volSize: 1024\n mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 225m\n    environment:\n      MYSQL_ROOT_PASSWORD: adminpwd\n      MYSQL_USER: sonar\n      MYSQL_PASSWORD: sonarpwd\n      MYSQL_DATABASE: sonar', '2016-12-30 21:39:21', '2017-11-09 20:38:51', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp SonarQube is an open source platform for continuous inspection of code quality in charge of managing the quality of Java source code.Through plug-in mechanism, SonarQube can integrate different testing tools, code analysis tools, and continuous integration tools, such as pmd-cpd、checkstyle、findbugs、Jenkins. These results can be processed by different plug-ins, and the quality of code can be measured quantitatively, so that the code quality management can be easily carried out for different sizes and kinds of projects. At the same time, SonarQube also provides interface support for a large number of continuous integration tools, and it can easily  be used in continuous integration. In addition, SonarQube plug-ins can support other programming languages besides Java, and provide well support for internationalization and report documentation.<br><br>\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password:admin/admin', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp SonarQube是一个连续检测代码质量的开源平台，用于管理Java源代码的质量。通过插件机制，SonarQube可以集成不同的测试工具，代码分析工具，以及持续集成工具，比如pmd-cpd、checkstyle、findbugs、Jenkins。通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。同时 SonarQube还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 SonarQube。此外，SonarQube的插件还可以对Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。<br><br>\r\n配置信息：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/sonarqube:6.5,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'security', '38', 'sonarqube1.png,sonarqube2.png', 'sonarqube.png', 'sonarqube.png', '4', '8192', '1024', '2', 'medium');
INSERT INTO `template` VALUES ('589', 'sonarqube', 'services:\n sonarqube:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/sonarqube:6.5\n  ports:\n    - port: 9000\n      protocol: HTTP\n    - port: 9092\n      protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 4\n  environment:\n    AUTH: no\n    SONARQUBE_JDBC_USERNAME: sonar\n    SONARQUBE_JDBC_PASSWORD: sonarpwd\n    SONARQUBE_JDBC_URL: jdbc:mysql://${name}-mysql:3306/sonar?useUnicode=true&characterEncoding=utf8\n  volumeMounts:\n      - name: data\n        mountPath: /opt/sonarqube/data\n        volSize: 1024\n mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: adminpwd\n      MYSQL_USER: sonar\n      MYSQL_PASSWORD: sonarpwd\n      MYSQL_DATABASE: sonar', 'services:\n sonarqube:\n  image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/sonarqube:6.5\n  ports:\n    - port: 9000\n      protocol: HTTP\n    - port: 9092\n      protocol: TCP\n  replicas: 1\n  mem_limit: 8192Mi\n  cpu_shares: 450m\n  environment:\n    AUTH: no\n    SONARQUBE_JDBC_USERNAME: sonar\n    SONARQUBE_JDBC_PASSWORD: sonarpwd\n    SONARQUBE_JDBC_URL: jdbc:mysql://${name}-mysql:3306/sonar?useUnicode=true&characterEncoding=utf8\n  volumeMounts:\n      - name: data\n        mountPath: /opt/sonarqube/data\n        volSize: 1024\n mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 425m\n    environment:\n      MYSQL_ROOT_PASSWORD: adminpwd\n      MYSQL_USER: sonar\n      MYSQL_PASSWORD: sonarpwd\n      MYSQL_DATABASE: sonar', '2016-12-30 21:39:21', '2017-11-09 20:38:51', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp SonarQube is an open source platform for continuous inspection of code quality in charge of managing the quality of Java source code.Through plug-in mechanism, SonarQube can integrate different testing tools, code analysis tools, and continuous integration tools, such as pmd-cpd、checkstyle、findbugs、Jenkins. These results can be processed by different plug-ins, and the quality of code can be measured quantitatively, so that the code quality management can be easily carried out for different sizes and kinds of projects. At the same time, SonarQube also provides interface support for a large number of continuous integration tools, and it can easily  be used in continuous integration. In addition, SonarQube plug-ins can support other programming languages besides Java, and provide well support for internationalization and report documentation.<br><br>\r\nConfiguration Information：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp Default admin sign-in account and password:admin/admin', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp SonarQube是一个连续检测代码质量的开源平台，用于管理Java源代码的质量。通过插件机制，SonarQube可以集成不同的测试工具，代码分析工具，以及持续集成工具，比如pmd-cpd、checkstyle、findbugs、Jenkins。通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。同时 SonarQube还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 SonarQube。此外，SonarQube的插件还可以对Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。<br><br>\r\n配置信息：	<br>\r\n	&nbsp&nbsp&nbsp&nbsp 默认管理员登录账号密码	admin/admin', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/sonarqube:6.5,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib', 'appshop', 'security', '37', 'sonarqube1.png,sonarqube2.png', 'sonarqube.png', 'sonarqube.png', '8', '16384', '1024', '2', 'large');
INSERT INTO `template` VALUES ('590', 'suitecrm', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  suitecrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/suitecrm:7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 4\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /appstore/suitecrm\n        volSize: 1024\n      - name: data3\n        mountPath: /appstore/apache\n        volSize: 1024\n      - name: data4\n        mountPath: /appstore/php\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  suitecrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/suitecrm:7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 8192Mi\n    cpu_shares: 450m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /bitnami/suitecrm\n        volSize: 1024\n      - name: data3\n        mountPath: /bitnami/apache\n        volSize: 1024\n      - name: data4\n        mountPath: /bitnami/php\n        volSize: 1024', '2017-03-22 15:22:39', '2017-10-19 17:42:49', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp SuiteCRM is a completely open source, enterprise-grade Customer Relationship Management (CRM) application. SuiteCRM is a fork of the popular SugarCRM application.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM user name. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp SuiteCRM是完全开源的企业级客户关系管理（CRM）应用程序。SuiteCRM是流行的客户关系管理（CRM）系统SugarCRM的一个软件分支。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/suitecrm:7', 'appshop', 'enterprise', '9', 'suitecrm1.png,suitecrm2.png', 'suitecrm.png', 'suitecrm.png', '8', '16384', '4096', '2', 'large');
INSERT INTO `template` VALUES ('591', 'suitecrm', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  suitecrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/suitecrm:7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 2\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /appstore/suitecrm\n        volSize: 1024\n      - name: data3\n        mountPath: /appstore/apache\n        volSize: 1024\n      - name: data4\n        mountPath: /appstore/php\n        volSize: 1024', 'services:\n  mysql:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/mysql:5.6\n    ports:\n      - port: 3306\n        protocol: TCP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MYSQL_ROOT_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data1\n        mountPath: /var/lib/mysql/data\n        volSize: 1024\n  suitecrm:\n    image: {{ harbor_url | default('harbor.' + os_subdomain) }}/hcpaas/suitecrm:7\n    ports:\n      - port: 80\n        protocol: HTTP\n    replicas: 1\n    mem_limit: 4096Mi\n    cpu_shares: 250m\n    environment:\n      MARIADB_HOST: ${name}-mysql\n      MARIADB_PASSWORD: pwd123456\n    volumeMounts:\n      - name: data2\n        mountPath: /bitnami/suitecrm\n        volSize: 1024\n      - name: data3\n        mountPath: /bitnami/apache\n        volSize: 1024\n      - name: data4\n        mountPath: /bitnami/php\n        volSize: 1024', '2017-03-22 15:22:39', '2017-10-19 17:42:49', '682', 'Introduction：<br>\r\n&nbsp&nbsp&nbsp&nbsp SuiteCRM is a completely open source, enterprise-grade Customer Relationship Management (CRM) application. SuiteCRM is a fork of the popular SugarCRM application.<br><br>\r\nConfiguration Information：<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM user name. Default value: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM application password. Default value: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM application e-mail. Default value: user@exmple.com<br>', '简介：<br>\r\n&nbsp&nbsp&nbsp&nbsp SuiteCRM是完全开源的企业级客户关系管理（CRM）应用程序。SuiteCRM是流行的客户关系管理（CRM）系统SugarCRM的一个软件分支。<br><br>\r\n配置信息：<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用用户名。默认值: user<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用程序密码。默认值: bitnami<br>\r\n	&nbsp&nbsp&nbsp&nbsp SuiteCRM 的应用电子邮箱。 默认值: user@example.com<br>', 'hcpaas', '{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/mysql:5.6_ib,{{ harbor_url | default('harbor.' + os_subdomain) }}/appstore/suitecrm:7', 'appshop', 'enterprise', '9', 'suitecrm1.png,suitecrm2.png', 'suitecrm.png', 'suitecrm.png', '4', '8192', '4096', '2', 'medium');






-- ----------------------------
--  Records of `s2i_envs`
-- ----------------------------
BEGIN;
INSERT INTO `s2i_envs` VALUES ('1', 'java', 'JAR_PATH', 'target'), ('2', 'tomcat', 'WAR_PATH', 'target'), ('3', 'tomcat', 'USE_CONTEXT', 'true'), ('4', 'tomcat', 'CONTEXT_PATH', ''), ('5', 'tomcat', 'SOURCE_PATH', ''), ('6', 'java', 'SOURCE_PATH', '');
COMMIT;
SET FOREIGN_KEY_CHECKS = 1;




INSERT INTO `os_loc_info` VALUES ('1', '1', 'North data center', '北方数据中心', '1', 'https://{{ groups.masters[0] }}:8443', 'admin', '{{ os_admin_password|b64encode }}', 'Region1', '.{{ os_subdomain }}', 'ws://{{ portalapi_url | default('portalapi.' + os_subdomain) }}', '{{ groups.storage[0] }}', '389', 'cn=admin,dc={{ ldap_second }},dc={{ ldap_top }}', '{{ ldap_admin_password|b64encode }}', 'dc={{ ldap_second }},dc={{ ldap_top }}', 'ou=users', '{{ ldap_second }}', 'person', '{{ harbor_url | default('harbor.' + os_subdomain) }}','tcp://{{ harbor_url | default('harbor.' + os_subdomain) }}:4789','http://{{ groups.storage[0] }}:8080', '{{ groups.storage[0] }}', 'http://prometheus.{{ os_subdomain }}', 'https://es.{{ os_subdomain }}', NULL, 'http://{{ harbor_url | default('harbor.' + os_subdomain) }}', 1,1,1,NULL,NULL,NULL,NULL,NULL);



CREATE 
ALGORITHM=UNDEFINED 
DEFINER=`root`@`%` 
SQL SECURITY DEFINER 
VIEW `view_system_module`AS 
(select `m`.`module_id` AS `module_id`,`m`.`module_pid` AS `module_pid`,`m`.`module_url` AS `module_url` from `hcpaas_bmp`.`system_module` `m` where (`m`.`has_deleted` = 0)) ;
SET FOREIGN_KEY_CHECKS=1;
